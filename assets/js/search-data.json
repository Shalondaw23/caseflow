{"0": {
    "doc": "README",
    "title": "README",
    "content": "Welcome to the GitHub Pages for Caseflow! The webpage can be viewed at http://department-of-veterans-affairs.github.io/caseflow/. ",
    "url": "/caseflow/README.html",
    "relUrl": "/README.html"
  },"1": {
    "doc": "README",
    "title": "Making changes",
    "content": "For small changes, most pages can be modified by clicking on the Edit this page link at the bottom of the page, modifying the md file, and committing the change. For larger changes, checkout the main-gh-pages branch, make local modifications, and push your changes. This will trigger an update to the gh-pages branch used by GitHub Pages. ",
    "url": "/caseflow/README.html#making-changes",
    "relUrl": "/README.html#making-changes"
  },"2": {
    "doc": "README",
    "title": "Purpose of the gh-pages and main-gh-pages branches",
    "content": "The (gh-pages branch) contains the html and asset files displayed by GitHub Pages. The branch is not intended to be merged in the master branch. Note that it has a completely separate commit history from the Caseflow application master branch. For more info, see the FAQ. The gh-pages branch is updated by a build-gh-pages GitHub Action that uses files from the main-gh-pages branch to generate html and asset files, which are pushed to the gh-pages branch. You should not modify the gh-pages branch directly, so you don’t need to git checkout the branch. Any commit to the main-gh-pages branch will trigger the GitHub Action, which can be seen here. See Committing changes for how to make changes. blockdiag blockdiag { class branch [color=lightblue, shape=note]; main-gh-pages [class=branch, label=\"main-gh-pages branch\"] gh-pages [class=branch, label=\"gh-pages branch\"] class ghAction [shape=ellipse] build-gh-pages [class=ghAction] website [shape=cloud] main-gh-pages -&gt; build-gh-pages -&gt; gh-pages -&gt; website; any-branch [class=branch, label=\"any branch\"] any-action [class=ghAction, label=\"some Action\"] any-branch -&gt; any-action -&gt; gh-pages; } main-gh-pages branch gh-pages branch build-gh-pages some Action website any branch Note that there may be some other GitHub Action that updates the gh-pages branch, so make sure to not cause folder or file name collisions when updating main-gh-pages. ",
    "url": "/caseflow/README.html#purpose-of-the-gh-pages-and-main-gh-pages-branches",
    "relUrl": "/README.html#purpose-of-the-gh-pages-and-main-gh-pages-branches"
  },"3": {
    "doc": "README",
    "title": "The main-gh-pages branch",
    "content": "The main-gh-pages branch has files for documentation. Some are automatically generated (e.g., Caseflow DB schema by a GitHub Action); others are manually created (e.g., Bat Team Remedies). ",
    "url": "/caseflow/README.html#the-main-gh-pages-branch",
    "relUrl": "/README.html#the-main-gh-pages-branch"
  },"4": {
    "doc": "README",
    "title": "Checking out the branch",
    "content": "Even though main-gh-pages is another branch in the Caseflow repo, it is highly encouraged to check out the main-gh-pages branch in a separate directory because it has no common files with Caseflow’s master branch to avoid accidentally deleting git-ignored files in your development branches. To checkout to a caseflow-gh-pages directory as a sibling of your caseflow directory: . cd YOUR_PATH_TO/caseflow cd .. git clone -b gh-pages --single-branch https://github.com/department-of-veterans-affairs/caseflow.git caseflow-gh-pages . ",
    "url": "/caseflow/README.html#checking-out-the-branch",
    "relUrl": "/README.html#checking-out-the-branch"
  },"5": {
    "doc": "README",
    "title": "Committing changes",
    "content": "Treat the main-gh-pages branch like Caseflow’s master branch. A difference is that anyone can commit to main-gh-pages without a peer-review (just like the Caseflow wiki page). However for significant changes, it is encouraged to create a development branch and do a squash-merge when you are satisfied with the changes, just like what is done in Caseflow’s master branch. cd caseflow-gh-pages git checkout -b my/add-amazing-new-page # Make modifications, preview changes, and commit git add . git commit # Once ready to merge git checkout main-gh-pages git merge --squash my/add-amazing-new-page git commit # Push to GitHub repo git push . ",
    "url": "/caseflow/README.html#committing-changes",
    "relUrl": "/README.html#committing-changes"
  },"6": {
    "doc": "README",
    "title": "Previewing changes",
    "content": "To preview changes locally, run the website generators locally as follows: . make run . If it’s the first time running it, install some tools: . bundle install make install_jekyll_diagram_dependencies # only needed to view diagrams locally . ",
    "url": "/caseflow/README.html#previewing-changes",
    "relUrl": "/README.html#previewing-changes"
  },"7": {
    "doc": "README",
    "title": "Subsites",
    "content": "A subsite is useful for presenting documentation using a different theme or layout. To create a new Jekyll subsite called SUBSITE: . | Create subdirectory __SUBSITE (prefixed with 2 underscores) | Create a new __SUBSITE/_config.yml to override the defaults set in __subsite_config.yml | Add a new entry in Makefile to build the html files into destination directory _site/SUBSITE | . Refer to the __help directory as an example. Note that any static site generator besides Jekyll can be used, such as Hugo, Gatsby, and Pelican – adapt the instructions accordingly. ",
    "url": "/caseflow/README.html#subsites",
    "relUrl": "/README.html#subsites"
  },"8": {
    "doc": "README",
    "title": "Jekyll",
    "content": "This site uses the Jekyll theme Just the Docs. The help/jekyll.md subsite uses a different Jekyll theme, specified in __help/_config.yml. Jekyll can be configured to use plugins. Each md file can define front matter to specify how the corresponding page should be treated or visualized by the Jekyll theme. ",
    "url": "/caseflow/README.html#jekyll",
    "relUrl": "/README.html#jekyll"
  },"9": {
    "doc": "README",
    "title": "FAQ",
    "content": "How was the gh-pages branch created without a commit history? . git checkout --orphan gh-pages git reset --hard git commit --allow-empty -m \"Initializing gh-pages branch\" git push origin gh-pages git checkout master . (reference) . Also see GitHub’s “Creating your site” instructions. Why not use the GitHub Wiki? . GitHub Wiki has the following limitations: . | Cannot serve up html content or files, along with referenced css files | No table of content generation | No built-in diagramming markup language | While the wiki context can be organized into folder, the wiki presentation doesn’t reflect the organization | . GitHub Pages provides more control over web page organization and presentation – see next section. Why not use the basic GitHub Pages (without GitHub Actions)? . GitHub Pages employs the Jekyll static site generator to convert md files into html files, all without any additional configuration – see GitHub Pages setup documentation. To enable additional website features and documentation presentation capabilities, a GitHub Action runs Jekyll and potentially other tools to generate the html files for GitHub Pages. The additional capabilities include: . | incorporating sets of generated html files, like Caseflow DB schema created via Jailer | generating table of contents and site navigation menu | using markup syntax to generate diagrams, like diagrams.md | enabling subsites with different website themes/layouts, like help/jekyll.md | quick text search (provided by the Just the Docs theme) | . These capabilities open up opportunities for enhanced presentation of Caseflow documentation, which aims to make information easier to find and understand. ",
    "url": "/caseflow/README.html#faq",
    "relUrl": "/README.html#faq"
  },"10": {
    "doc": "Contents",
    "title": "Contents",
    "content": "Preview dark theme . | Bat Team Quick Ref . | Dispatch_stuck, , ok tags: batteam, dispatch”, and stuck . | Bat Team, , tags: . | . | . ",
    "url": "/caseflow/index",
    "relUrl": "/index"
  },"11": {
    "doc": "Contents",
    "title": "Database",
    "content": ". | Caseflow DB schema (created via Jailer) | Help . | Jekyll | . | . ",
    "url": "/caseflow/index#database",
    "relUrl": "/index#database"
  },"12": {
    "doc": "Dispatch claim being “stuck”",
    "title": "Dispatch claim being “stuck”",
    "content": "If I receive a support issue regarding Caseflow Dispatch claim being “stuck”. | Look for a Sentry error in #appeals-dispatch channel. | If the error is related to AASM::InvalidTransition, that means the state transition is invalid. | Find the associated dispatch task in the dispatch_tasks table. | Choose the appropriate state for the task by referencing the aasm machine in Dispatch::Task model and update the task manually using production console. | Example of a similar problem can be found here. | . ",
    "url": "/caseflow/batteam/dispatch/dispatch_stuck.html",
    "relUrl": "/batteam/dispatch/dispatch_stuck.html"
  },"13": {
    "doc": "Caseflow Dispatch",
    "title": "Caseflow Dispatch",
    "content": "Caseflow Dispatch . ",
    "url": "/caseflow/batteam/dispatch/",
    "relUrl": "/batteam/dispatch/"
  },"14": {
    "doc": "Bat Team",
    "title": "Bat Team",
    "content": "Bat Team . ",
    "url": "/caseflow/batteam/",
    "relUrl": "/batteam/"
  },"15": {
    "doc": "Caseflow Queue",
    "title": "About Queue",
    "content": "Caseflow Queue is a workflow management tool that will allow BVA employees process legacy and AMA appeals at the Board. It’s also the entry point for Caseflow Reader; users navigate to Reader from Queue. ",
    "url": "/caseflow/Caseflow%20Queue/#about-queue",
    "relUrl": "/Caseflow%20Queue/#about-queue"
  },"16": {
    "doc": "Caseflow Queue",
    "title": "Definitions and term-usage",
    "content": " ",
    "url": "/caseflow/Caseflow%20Queue/#definitions-and-term-usage",
    "relUrl": "/Caseflow%20Queue/#definitions-and-term-usage"
  },"17": {
    "doc": "Caseflow Queue",
    "title": "Features",
    "content": "It contains the following high level features: . | Queue table: Allowing users to view their work (cases with tasks assigned to them) in a table form | Case details: Allowing users to view data about the appeal and Veteran | Add/Remove/Edit issues | Automatic case distribution | Organizations | Tasks | Case timeline | Case search | [[Post Decision Motions]] | . ",
    "url": "/caseflow/Caseflow%20Queue/#features",
    "relUrl": "/Caseflow%20Queue/#features"
  },"18": {
    "doc": "Caseflow Queue",
    "title": "User groups",
    "content": "All Board teams use Caseflow Queue to view and complete their tasks. Some branches also use other Caseflow products and features, like the Hearing Branch uses Caseflow Hearings to schedule hearings. | Team | Primary Caseflow functionality | . | Case Review | Caseflow IntakeCaseflow QueueCaseflow ReaderIssues | . | Mail | Caseflow Queue | . | Translation | Caseflow QueueCaseflow Reader | . | Hearing Branch | Caseflow QueueCaseflow Hearings | . | Privacy Team | Caseflow QueueeFolder Express | . | Decision-drafting attorneys | Caseflow QueueCaseflow ReaderIssues | . | Judges &amp; acting judges | Caseflow QueueCaseflow ReaderCaseflow HearingsIssuesAutomatic Case Distribution | . | VLJ Support Staff | Caseflow QueueCaseflow Reader | . | BVA Dispatch | Caseflow QueueCaseflow ReaderInteractive Decision Template | . | Quality Review | Caseflow QueueCaseflow Reader | . | Litigation Support | Caseflow QueueCaseflow Reader | . | Advanced on the Docket (AOD) | Caseflow QueueCaseflow Reader | . | VSOs | Caseflow QueueCaseflow ReaderCaseflow Hearings | . | Private attorneys and claims agents | Caseflow QueueCaseflow ReaderCaseflow Hearings | . Other VA . | VA call center | . ",
    "url": "/caseflow/Caseflow%20Queue/#user-groups",
    "relUrl": "/Caseflow%20Queue/#user-groups"
  },"19": {
    "doc": "Caseflow Queue",
    "title": "Caseflow Queue",
    "content": " ",
    "url": "/caseflow/Caseflow%20Queue/",
    "relUrl": "/Caseflow%20Queue/"
  },"20": {
    "doc": "Diagrams",
    "title": "Diagrams",
    "content": "# Diagrams Testing https://github.com/zhustec/jekyll-diagrams ## blockdiag {% blockdiag %} blockdiag { A -> B -> C -> D; A -> E -> F -> G; } {% endblockdiag %} ## seqdiag {% seqdiag %} seqdiag { browser -> webserver [label = \"GET /index.html\"]; browser webserver [label = \"POST /blog/comment\"]; webserver -> database [label = \"INSERT comment\"]; webserver A [label=a]; S -> B [label=b]; A -> D [label=c]; B -> D [label=d]; } {% endgraphviz %} ## mermaid {% mermaid %} sequenceDiagram participant John participant Alice Alice->>John: Hello John, how are you? John-->>Alice: Great! {% endmermaid %} ## nomnoml {% nomnoml %} [Pirate|eyeCount: Int|raid();pillage()| [beard]--[parrot] [beard]-:>[foul mouth] ] [Marauder][Pirate] [jollyness]->[rum] [jollyness]->[singing] [Pirate]-> *[rum|tastiness: Int|swig()] [Pirate]->[singing] [singing][rum] [st]->[plunder] [plunder]->[more loot] [more loot]->[st] [more loot] no ->[e] [Sailor] - [shiver me;timbers] {% endnomnoml %} ## plantuml {% plantuml %} @startuml class Car Driver - Car : drives > Car *- Wheel : have 4 > Car -- Person : playing : play; playing => stopped : stop; playing => paused : pause; paused => playing : pause; paused => stopped : stop; }; initial => \"tape player off\"; \"tape player off\" => stopped : power; \"tape player on\" => \"tape player off\" : power; {% endsmcat %} ## wavedrom {% wavedrom %} {signal: [ {name: 'clk', wave: 'p.....|...'}, {name: 'dat', wave: 'x.345x|=.x', data: ['head', 'body', 'tail', 'data']}, {name: 'req', wave: '0.1..0|1.0'}, {name: 'ack', wave: '1.....|01.'} ]} {% endwavedrom %} ",
    "url": "/caseflow/diagrams.html",
    "relUrl": "/diagrams.html"
  }
}
