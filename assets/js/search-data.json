{"0": {
    "doc": "README",
    "title": "README",
    "content": "Welcome to the GitHub Pages for Caseflow! The webpage can be viewed at http://department-of-veterans-affairs.github.io/caseflow/. ",
    "url": "/caseflow/README.html",
    "relUrl": "/README.html"
  },"1": {
    "doc": "README",
    "title": "Making changes",
    "content": "For small changes, most pages can be modified by clicking on the Edit this page link at the bottom of the page, modifying the md file, and committing the change. For larger changes, checkout the main-gh-pages branch, make local modifications, and push your changes. This will trigger an update to the gh-pages branch used by GitHub Pages. ",
    "url": "/caseflow/README.html#making-changes",
    "relUrl": "/README.html#making-changes"
  },"2": {
    "doc": "README",
    "title": "Purpose of the gh-pages and main-gh-pages branches",
    "content": "The (gh-pages branch) contains the html and asset files displayed by GitHub Pages. The branch is not intended to be merged in the master branch. Note that it has a completely separate commit history from the Caseflow application master branch. For more info, see the FAQ. The gh-pages branch is updated by a build-gh-pages GitHub Action that uses files from the main-gh-pages branch to generate html and asset files, which are pushed to the gh-pages branch. You should not modify the gh-pages branch directly. Any commit to the main-gh-pages branch will trigger the GitHub Action, which can be seen here. See Committing changes for how to make changes. blockdiag blockdiag { class branch [color=lightblue, shape=note]; main-gh-pages [class=branch, label=\"main-gh-pages branch\"] gh-pages [class=branch, label=\"gh-pages branch\"] class ghAction [shape=ellipse] build-gh-pages [class=ghAction] website [shape=cloud] main-gh-pages -&gt; build-gh-pages -&gt; gh-pages -&gt; website; any-branch [class=branch, label=\"any branch\"] any-action [class=ghAction, label=\"some Action\"] any-branch -&gt; any-action -&gt; gh-pages; } main-gh-pages branch gh-pages branch build-gh-pages some Action website any branch Note that there may be some other GitHub Action that updates the gh-pages branch, so make sure to not cause folder or file name collisions when updating main-gh-pages. ",
    "url": "/caseflow/README.html#purpose-of-the-gh-pages-and-main-gh-pages-branches",
    "relUrl": "/README.html#purpose-of-the-gh-pages-and-main-gh-pages-branches"
  },"3": {
    "doc": "README",
    "title": "The main-gh-pages branch",
    "content": "The main-gh-pages branch has files for documentation. Some are automatically generated (e.g., Caseflow DB schema by a GitHub Action); others are manually created (e.g., Bat Team Remedies). ",
    "url": "/caseflow/README.html#the-main-gh-pages-branch",
    "relUrl": "/README.html#the-main-gh-pages-branch"
  },"4": {
    "doc": "README",
    "title": "Checking out the branch",
    "content": "Even though main-gh-pages is another branch in the Caseflow repo, it is highly encouraged to check out the main-gh-pages branch in a separate directory because it has no common files with Caseflow’s master branch to avoid accidentally deleting git-ignored files in your development branches. To checkout to a caseflow-gh-pages directory as a sibling of your caseflow directory: . cd YOUR_PATH_TO/caseflow cd .. git clone -b gh-pages --single-branch https://github.com/department-of-veterans-affairs/caseflow.git caseflow-gh-pages . ",
    "url": "/caseflow/README.html#checking-out-the-branch",
    "relUrl": "/README.html#checking-out-the-branch"
  },"5": {
    "doc": "README",
    "title": "Committing changes",
    "content": "Treat the main-gh-pages branch like Caseflow’s master branch. A difference is that anyone can commit to main-gh-pages without a peer-review (just like the Caseflow wiki page). However for significant changes, it is encouraged to create a development branch and do a squash-merge when you are satisfied with the changes, just like what is done in Caseflow’s master branch. cd caseflow-gh-pages git checkout -b my/add-amazing-new-page # Make modifications, preview changes, and commit git add . git commit # Once ready to merge git checkout main-gh-pages git merge --squash my/add-amazing-new-page git commit # Push to GitHub repo git push . ",
    "url": "/caseflow/README.html#committing-changes",
    "relUrl": "/README.html#committing-changes"
  },"6": {
    "doc": "README",
    "title": "Previewing changes",
    "content": "To preview changes locally, run the website generators locally as follows: . make run . If it’s the first time running it, install some tools: . bundle install make install_jekyll_diagram_dependencies # only needed to view diagrams locally . ",
    "url": "/caseflow/README.html#previewing-changes",
    "relUrl": "/README.html#previewing-changes"
  },"7": {
    "doc": "README",
    "title": "Subsites",
    "content": "A subsite is useful for presenting documentation using a different theme or layout. To create a new Jekyll subsite called SUBSITE: . | Create subdirectory __SUBSITE (prefixed with 2 underscores) | Create a new __SUBSITE/_config.yml to override the defaults set in __subsite_config.yml | Add a new entry in Makefile to build the html files into destination directory _site/SUBSITE | . Refer to the __help directory as an example. Note that any static site generator besides Jekyll can be used, such as Hugo, Gatsby, and Pelican – adapt the instructions accordingly. ",
    "url": "/caseflow/README.html#subsites",
    "relUrl": "/README.html#subsites"
  },"8": {
    "doc": "README",
    "title": "Jekyll",
    "content": "This site uses the Jekyll theme Just the Docs. The help/jekyll.md subsite uses a different Jekyll theme, specified in __help/_config.yml. Jekyll can be configured to use plugins. Each md file can define front matter to specify how the corresponding page should be treated or visualized by the Jekyll theme. ",
    "url": "/caseflow/README.html#jekyll",
    "relUrl": "/README.html#jekyll"
  },"9": {
    "doc": "README",
    "title": "FAQ",
    "content": "How was the gh-pages branch created without a commit history? . git checkout --orphan gh-pages git reset --hard git commit --allow-empty -m \"Initializing gh-pages branch\" git push origin gh-pages git checkout master . (reference) . Also see GitHub’s “Creating your site” instructions. Why not use the GitHub Wiki? . GitHub Wiki has the following limitations: . | Cannot serve up html content or files, along with referenced css files | No table of content generation | No built-in diagramming markup language | While the wiki context can be organized into folder, the wiki presentation doesn’t reflect the organization | . GitHub Pages provides more control over web page organization and presentation – see next section. Why not use the basic GitHub Pages (without GitHub Actions)? . GitHub Pages employs the Jekyll static site generator to convert md files into html files, all without any additional configuration – see GitHub Pages setup documentation. To enable additional website features and documentation presentation capabilities, a GitHub Action runs Jekyll and potentially other tools to generate the html files for GitHub Pages. The additional capabilities include: . | incorporating sets of generated html files, like Caseflow DB schema created via Jailer | generating table of contents and site navigation menu | using markup syntax to generate diagrams, like diagrams.md | enabling subsites with different website themes/layouts, like help/jekyll.md | quick text search (provided by the Just the Docs theme) | . These capabilities open up opportunities for enhanced presentation of Caseflow documentation, which aims to make information easier to find and understand. ",
    "url": "/caseflow/README.html#faq",
    "relUrl": "/README.html#faq"
  },"10": {
    "doc": "Contents",
    "title": "Contents",
    "content": "Preview dark theme . | Bat Team Quick Ref . | Dispatch_stuck, , ok tags: batteam, dispatch”, and stuck . | Bat Team, , tags: . | . | . ",
    "url": "/caseflow/index",
    "relUrl": "/index"
  },"11": {
    "doc": "Contents",
    "title": "Database",
    "content": ". | Caseflow DB schema (created via Jailer) | Help . | Jekyll | . | . ",
    "url": "/caseflow/index#database",
    "relUrl": "/index#database"
  },"12": {
    "doc": "Dispatch claim being “stuck”",
    "title": "Dispatch claim being “stuck”",
    "content": "If I receive a support issue regarding Caseflow Dispatch claim being “stuck”. | Look for a Sentry error in #appeals-dispatch channel. | If the error is related to AASM::InvalidTransition, that means the state transition is invalid. | Find the associated dispatch task in the dispatch_tasks table. | Choose the appropriate state for the task by referencing the aasm machine in Dispatch::Task model and update the task manually using production console. | Example of a similar problem can be found here. | . ",
    "url": "/caseflow/batteam/dispatch/dispatch_stuck.html",
    "relUrl": "/batteam/dispatch/dispatch_stuck.html"
  },"13": {
    "doc": "Caseflow Dispatch",
    "title": "Caseflow Dispatch",
    "content": "Caseflow Dispatch . ",
    "url": "/caseflow/batteam/dispatch/",
    "relUrl": "/batteam/dispatch/"
  },"14": {
    "doc": "Bat Team",
    "title": "Bat Team",
    "content": "Bat Team . ",
    "url": "/caseflow/batteam/",
    "relUrl": "/batteam/"
  },"15": {
    "doc": "Presentations",
    "title": "Presentations",
    "content": "# Presentations - [May 2020 Case Distribution Overview](https://docs.google.com/presentation/d/143KwMEkw55YoKRxPL3vumVFGPR3X2n23eqxrcy1tDyM/edit#slide=id.g54fd333abc_0_70) - [November 2018 Presentation with cute robots describing how Automatic Case Distribution works](https://github.com/department-of-veterans-affairs/caseflow/files/2971837/2018-11-14.Automatic.Case.Distribution.UPDATED.pdf) # Goal When a Veterans Law Judge requests cases that are ready for a decision, those cases are drawn from the Board's various dockets according to a set of rules. Prior to the implementation of the Appeals Modernization Act in February 2019, there was only a single docket, and the distribution of cases could be done by hand. With AMA in place, there are now four dockets, and the rules for distribution have reached a level of complexity that this task now must be automated. This pages describes the rules by which cases are distributed. # Concepts ## Docket A docket is a line. We can generally think of a docket like a first-in, first-out (FIFO) queue, however there are some exceptions to this rule. One is that a case must be \"ready\" to be distributed, i.e. it must have no other tasks to be completed before a decision is written. So a ready case will be distributed before a non-ready case, even if the non-ready case is ahead of it on the docket. The Board is also allowed a small amount of wiggle room so that it doesn't have to strictly observe docket order at the cost of efficiency; before AMA this was known as the \"docket range,\" a number of cases that were close enough to the front of the line to be considered eligible to be distributed. ## Priority If an appellant is suffering a serious illness, in financial distress, or for another sufficient cause, their appeal can be Advanced on the Docket, or prioritized. If the appellant is older than 75, their appeal is automatically AOD; otherwise, they must file a motion requesting this status. Board decisions can be appealed to the Court of Appeals for Veterans Claims. If CAVC disagrees with the Board's decision, they will remand it back to the Board for another decision. These post-CAVC remands are also prioritized. There is no differentiation between the various reasons for prioritizing cases. All priority cases are prioritized equally. ## Genpop Before AMA, if a judge held a hearing with the appellant, that same judge would be required to write the decision on the appeal. We would say that this appeal is \"tied to the judge.\" A Veteran could waive this right, enabling their appeal to go to any judge. They would be asked to do this if the judge retired, for example. At this point, their case would be deemed \"genpop\" — eligible to go to any judge. Under AMA, this is no longer a requirement under law. However, it is still preferable for an appeal to go to the same judge who heard the hearing, provided they are still active at the Board. An additional caveat, AOD appeals that are remanded by CAVC are tied to the same judge as wrote the original decision. In the app, appeals that meet either one of these conditions are considered genpop: - All appeals without a hearing - All appeals with hearings, but none that are held (`disposition == \"held\"`) - All appeals whose most recently held hearing is not tied to any active judge. A judge is considered active if they have logged in within the past 60 days. The hearing date is obtained by joining on the `HearingDay` table's `scheduled_for` field. ## Batch size When a judge requests a distribution of cases, they will receive a certain number of cases in their queue. This number is called the batch size. It is a multiple of the number of attorneys on the judge's team (currently 3 x the number of attorneys). If the judge does not have their own team, for example if they are a DVC, they receive a set number of cases known as an alternative batch size (currently 15 cases). We also can calculate a number called a total batch size, which is the sum of all of the individual judge's batch sizes. The total batch size is used as a denominator for calculating things like the optimal percentage of priority cases to distribute. ## Legacy docket range The legacy docket combines hearing and non-hearing appeals. As a result, it is not optimal to always grab the frontmost case; there may be cases farther back on the docket that can only be distributed to this specific judge, and it will be advantageous to overall timeliness to distribute them ahead of genpop cases that could be worked by anybody. But we still need to respect docket order, and we do this, similar to how the legacy docket was manually managed, by calculating a docket range. This is the range of cases on the legacy docket that are close enough to the front of the line to be distributed. The legacy docket range is equal to the total batch size, minus the count of priority cases, times the legacy docket proportion (see Docket Proportions below). A hearing case within that range is considered eligible to be distributed to its judge as if it was at the front of the line. ## Ready Cases considered \"ready\" for distribution must have all pre-distribution tasks completed. For AMA Appeals, this is simply determined by the state of the appeal's [distribution task](https://github.com/department-of-veterans-affairs/appeals-team/blob/master/Project%20Folders/Tasks/tasktrees/descr/DistributionTask_Organization.md). If this task has a status of \"assigned\", all child tasks that must be completed for distribution are either complete or cancelled, meaning the appeal is ready for distribution. For legacy appeals, the appeal must meet the following conditions to be considered ready to distribute: 1. The appeal must be active at the board (`bfmpro` of the vacols case is \"ACT\") 1. The appeal must be in case storage (`bfcurloc` of the vacols case is \"81\" or \"83\") 1. The appeal must not belong to a special team at the board (`bfbox` of the vacols case is null) 1. The appeal must not have any open blocking vacols diaries (`tskdcls` is null (diary is open) and `tskactcd` is one of 'EXT', 'HCL', or 'POA' of any associated vacols diary record (diary is a blocking diary type)) 1. The appeal must not have any open blocking vacols mail (`mlcompdate` is null (mail task is open) and `mltype` is NOT one of '02', '05', '08', or '13' of any associated vacols mail record (mail task is a blocking distribution type)) ```ruby appeal = LegacyAppeal.find_by(vacols_id: 3856200) VACOLS::CaseDocket.priority_ready_appeal_vacols_ids.include? appeal.vacols_id => false # Appeal is considered either not ready or not priority appeal.aod? => true # Is priority appeal.location_code => \"81\" # Appeal is in case storage, one of the conditions for \"ready to distribute\" VACOLS::Case.find_by(bfkey: appeal.vacols_id).bfmpro => \"ACT\" # Appeal is active, one of the conditions for \"ready to distribute\" VACOLS::Case.find_by(bfkey: appeal.vacols_id).bfbox => nil # Case does not belong to a special team, one of the conditions for \"ready to distribute\" VACOLS::Note.where(tsktknm: appeal.vacols_id, tskdcls: nil, tskactcd: ['EXT', 'HCL', 'POA']).count => 0 # No blocking diary items in vacols, one of the conditions for \"ready to distribute\" VACOLS::Mail.where(mlfolder: appeal.vacols_id, mlcompdate: nil).pluck(:mltype) => [\"07\"] # There is an open blocking mail item in vacols, meaning this case is not ready to distribute ``` # AMA dockets The Appeals Modernization Act created two new dockets, in addition to the existing \"legacy\" docket, and allowed VA to create as many additional dockets as it wants. VA decided to make one additional docket, bringing the total number to four. 1) *Legacy docket.* The original flavor docket. This docket contains appeals of decisions before AMA took effect. As there was previously only one docket, the legacy docket contains both hearing and non-hearing appeals. It also has an open record, meaning that evidence can be added to an appeal at any time. 1) *Direct Review docket.* This AMA docket contains appeals where the Veteran has decided they do not want to add new evidence and do not want a hearing. To encourage people to use this option, the Board has promised that the average number of days to complete appeals on this docket will be 365 days, one year. 1) *Evidence Submission docket.* On this AMA docket, a Veteran can add evidence during the 90 days after they begin their appeal. There is no timeliness goal for this docket. 1) *Hearing Request docket.* On this AMA docket, the Veteran has requested a hearing with a judge. They can also submit evidence at their hearing, or during the 90 days after the hearing. # Policy Objectives In designing the automatic case distribution, there were a number of policy objectives that the team sought to realize. * Priority cases should be balanced among judges. No judge should request a distribution and receive all priority cases. * Priority cases should be distributed quickly. * Docket order should be respected. An appeal that has an earlier docket date should be distributed before one with a later docket date. A certain amount of allowance is made on the legacy docket, where some appeals are tied to judges. In this case, we'll want to maximize the docket efficiency, that is the extent to which we do not need to look too deep on the docket to find cases for a given judge. * Nonpriority appeals on the Direct Review docket should receive a decision about 365 days after VA received the form starting the appeal. * However, the Board should also start to work some Direct Review cases straight away, and not just wait for one year before starting to work the Direct Review docket. As a result, we want to ramp up to the 365 day timeline. * The other dockets, legacy, Evidence Submission, and Hearing Request, should be balanced proportionately. That is the number of nonpriority cases distributed from each docket should be proportionate to the number of cases on each docket. * Clearing the legacy backlog should be prioritized, but meeting the Direct Review timeliness goal is a higher priority. # Wrangling the dockets ## Priority Target How much of a given distribution should be priority cases? If we were to just always distribute a priority case if one was available, we would see that some judges would get far more priority cases than others, just by virtue of the timing of their request. Instead, we'll calculate an optimal number of cases for a given distribution that should be priority. We start by [counting](https://github.com/department-of-veterans-affairs/caseflow/blob/a349110aa64f93561aa52297738dcf537ba28364/app/models/docket_coordinator.rb#L62) all of the priority cases that are ready to be distributed on any docket. We then [divide this number by the total batch size](https://github.com/department-of-veterans-affairs/caseflow/blob/a349110aa64f93561aa52297738dcf537ba28364/app/models/concerns/ama_case_distribution.rb#L111) to get an target percentage, and then multiply by the individual judge's batch size (rounding up) to get the target number of priority cases that should be distributed. ## Docket Proportions We don't have to worry about which docket priority cases come from; all priority cases are treated the same. But for nonpriority cases, we must balance the four dockets, calculating the percentage of cases that we want to come from each docket. ### Direct Review docket Unlike the other dockets, cases on the Direct Review docket are distributed based on the Board's 365 day timeliness goal. We do this by giving each Direct Review case a `target_decision_date` at intake of 365 days after the `receipt_date` (this allows the Board the option of increasing the goal, while respecting the promises made to Veterans who are already in the door). We can then mark cases as due a [set number of days](https://github.com/department-of-veterans-affairs/caseflow/blob/a349110aa64f93561aa52297738dcf537ba28364/app/models/dockets/direct_review_docket.rb#L5) before their `target_decision_date`. We then [count the number of due cases](https://github.com/department-of-veterans-affairs/caseflow/blob/a349110aa64f93561aa52297738dcf537ba28364/app/models/dockets/direct_review_docket.rb#L11), and like we do with the priority target, [divide by the total batch size](https://github.com/department-of-veterans-affairs/caseflow/blob/a349110aa64f93561aa52297738dcf537ba28364/app/models/docket_coordinator.rb#L36) (this time after excluding the count of priority cases from the denominator) to get the direct review proportion. However, this proportion would remain at zero for nearly a year, waiting for cases to become due, and this is contrary to the Board's goal of beginning to work these cases immediately. So we will also calculate an [interpolated minimum direct review proportion](https://github.com/department-of-veterans-affairs/caseflow/blob/a349110aa64f93561aa52297738dcf537ba28364/app/models/docket_coordinator.rb#L73). We use the rate at which Direct Reviews are arriving to calculate a pacesetting proportion, or the proportion of nonpriority decision capacity that would need to go to the Direct Review docket in order to keep pace with what's arriving. We will then interpolate between 0 and the pacesetting proportion based on the age of the oldest Direct Review in the system. Finally, to accelerate the curve out, we multiply this interpolated figure by the [interpolated direct review proportion adjustment](https://github.com/department-of-veterans-affairs/caseflow/blob/a349110aa64f93561aa52297738dcf537ba28364/app/models/docket_coordinator.rb#L10). This gives us a curve out of the direct review proportion that would look something like the following: ![](/assets/images/distribution-from-direct-docket.png) The \"jolt\" in this chart shows when the calculation switched from using the interpolated minimum to using the standard due proportion. The direct review proportion is also subject to a maximum. It currently cannot exceed 80%. This prevents a complete halt to work on other dockets should demand for direct reviews approach the Board's capacity. ## Balanced dockets The other dockets are balanced proportionate to the number of cases on the docket. After the direct review proportion is deducted, the remaining proportions are divided among the other dockets according to their weight, the number of cases waiting. The legacy docket has two exceptions to this rule. First, in addition to counting the cases on the docket, we also count the number of cases where the Agency of Original Jurisdiction has received a Notice of Disagreement but where the appeal has not yet reached the Form 9 stage. We count these cases at a 40% discount, reflecting the likelihood that they will come to the Board and providing a fuller picture of what is waiting. Second, the legacy docket is subject to a 10% minimum. This ensures that even as the legacy docket is winnowed, VA does not let up off the gas of finishing these older cases. Note that the sum of this minimum and the direct review maximum should not exceed 100%. # Case distribution ## Requested When a judge requests the distribution, we distribute cases according to the following steps: 1) We distribute priority legacy cases that are tied to a judge. As many as available, up to the limit of the batch size. 1) We distribute priority AMA hearing cases that are tied to a judge. Again, as many as available. 1) We distribute nonpriority legacy cases that are tied to a judge. We'll distribute as many as available, but they must be within the legacy docket range. 1) We distribute nonpriority AMA hearing cases that are tied to a judge. As many as available. 1) At this point, we may have distributed some priority appeals. We'll deduct those appeals from the priority target to get the number of additional priority appeals that we should distribute. We ask each docket for its priority appeals that have been waiting the longest, and distribute the oldest ones up to the priority remaining number, irrespective of docket. 1) We have also potentially distributed some nonpriority appeals from the legacy and AMA hearing dockets. We'll deduct these cases from the docket proportions. 1) Now we're ready to distribute the remaining nonpriority cases from each of the dockets according to the updated docket proportions. As some of these proportions may be small, we do this by means of [stochastic allocation](https://github.com/department-of-veterans-affairs/caseflow/blob/a349110aa64f93561aa52297738dcf537ba28364/app/models/concerns/proportion_hash.rb#L31). 1) If when we try to distribute cases from a given docket, we find that it has no cases that are ready to distribute, we'll reallocate those cases among the other dockets according to the docket proportions and try again until we've found a number of cases equal to the batch size. ## Priority Push In an effort to get priority cases to judges without waiting for them to request cases, every Monday morning, a`PushPriorityAppealsToJudgesJob` is run to push ready priority cases to judges that can receive them. Judges can receive this push if they have an active judge team in caseflow and they hav not been removed from the job. DVCs are in charge of keeping this list of judges up to date and can add and remove judges from this job from the Team Management page. To ensure some judges are not distributed more than others, we first distribute all priority cases that are tied to a judge (non-genpop) to that respective judge. We then look at the number of cases all eligible judges have received in the last month (including the ones just distributed), calculate a target number for each judge that would get us as close to even as possible, and distribute the remaining ready priority genpop appeals based on that calculation. The board is in charge of manually handling any cases that cannot be distributed due to the associated judge being unable to receive cases (they have left the board, they are no longer a judge, they are on vacation, etc). # Further reading [Presentation with cute robots describing how Automatic Case Distribution works](https://github.com/department-of-veterans-affairs/caseflow/files/2971837/2018-11-14.Automatic.Case.Distribution.UPDATED.pdf) [Jupyter Notebooks](https://github.com/department-of-veterans-affairs/docketeer) ",
    "url": "/caseflow/Caseflow%20Queue/Automatic%20Case%20Distribution/",
    "relUrl": "/Caseflow%20Queue/Automatic%20Case%20Distribution/"
  },"16": {
    "doc": "What are tasks?",
    "title": "What are tasks?",
    "content": "## What are tasks? See all Caseflow tasks' source code [here](https://github.com/department-of-veterans-affairs/caseflow/tree/master/app/models/tasks). Tasks are how Caseflow records who has responsibility for taking action on an appeal. Tasks contain three essential pieces of information: 1. **Appeal**. Which appeal requires this action. 2. **Assignee**. Who is supposed to take the action. The assignee can be a person, a team of people, or an abstract organization used as a placeholder for some automated action that will be taken on the appeal. 3. **Type**. The type of task implies the action that is supposed to be taken. ![image](/assets/images/currently-active-tasks.png) * Each appeal is associated with a root task. All required tasks for the appeal will be children of this root task. * Actions or task state change can cause new tasks to be associated with the root task or its descendant tasks. * Tasks determine what actions are available to a role. * A task's state is affected by actions taken by a user. * Many tasks are first assigned to an `Organization`. When the _admin_ for the organization (e.g., judge, coordinator) assigns a case to an individual user, a child task (or subtask) is created and assigned to a user within that organization. The task and child task have the same type but different `assigned_to_type`. * When the child task is created and assigned, the parent task's state is `on_hold`. * When the child task's state is complete, a hook causes the parent task's state to be complete. * When the child task's state is cancelled, a hook causes the parent task's state to be cancelled. * Task Types that do not follow the Parent Org - Child User structure are all Judge Tasks, all Attorney Tasks, and the root task. * Judge & Attorney have a similar parent/child structure, but do not mimic the behavior. * This distinction is a historic artifact, rather than a deliberate choice, as those Judge & Attorney task types predate Organizations. ### Task status * Possible task status values (see `task.rb: enum status`): `assigned`, `in_progress`, `on_hold`, `completed`, `cancelled`. * A task is `closed` if it is `completed` or `cancelled` (see `Task.closed_statuses`). * `task.open?` is implemented as `!self.class.closed_statuses.include?(status)`. * A task is `active` (`task.active?`) if it is `assigned` or `in_progress` (see `Task.active_statuses`). * Note that `Task.open_statuses` is implemented as `active_statuses.concat([Constants.TASK_STATUSES.on_hold])`, which corresponds with `task.open?` as long as no other status values are added. * When a status is \"active\" we expect properties of the task to change. When a task is not \"active\" we expect that properties of the task will not change. ### Cancellation reason There are many reasons why a task might be `cancelled`. `cancellation_reason` provides a means to identify a reason for a task's most recent `cancelled` status. Usually a `cancelled` status is a final state for a task, so we wouldn't expect it to change again. The `cancellation_reason` can be cleared for a task if the task ever gets uncancelled, and a new reason can be added, should it be cancelled for a different reason. Supplemental information from users for `cancellation_reason` can be stored in `instructions`. Possible values for `cancellation_reason` are detailed here (see also `task.rb: enum cancellation_reason`): |`cancellation_reason` value|Description|---------------------------|-----------|`poa_change`|IHP tasks are cancelled when there is a change of POA for an appeal. The IHP task for the original POA gets cancelled and a new IHP task is opened for the new POA.| ### How do tasks map to the appeals process? * For further description, see [this slide deck](https://docs.google.com/presentation/d/1Cc84GH7giWHTNxUe3zixH7O-QT77STlptYfud9X8P1Y). * Also check out this generated [Task Tree documentation](https://github.com/department-of-veterans-affairs/appeals-team/blob/master/Project%20Folders/Tasks/tasktrees/README.md) ### Task timestamps Tasks all have 6 timestamps that record when certain events happen 1. `created_at`: When the `ActiveRecord` was created (done automatically by rails) 1. `updated_at`: When any field of the `ActiveRecord` was last updated (done automatically by rails) 1. `assigned_at`: When the `ActiveRecord` [is created](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L27), this is set to the creation datetime or what `assigned_at` attribute is [passed to the task](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L626) upon creation. It is also set when a task's `status` is [updated](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L644) to \"[assigned](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L631)\" 1. `started_at`: When a task's `status` is [updated](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L644) to \"[in_progress](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L632)\" 1. `placed_on_hold_at`: When a task's `status` is [updated](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L644) to \"[on_hold](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L633)\" 1. `closed_at`: When a task's `status` is [updated](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L644) to \"[completed](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L634)\" or \"[cancelled](https://github.com/department-of-veterans-affairs/caseflow/blob/9b73d5ff8aa6a65be9a529b258bde91caa65de82/app/models/task.rb#L635)\" ## What are task actions? Task actions are the options that are presented in a dropdown menu on the case details page of an individual appeal. Each task has a set of actions available to be taken on it given the state of the appeal, type of task, and relationship of the current user to the appeal. Task actions do only one thing: redirect the current user to a different URL when clicked. The resulting page may be a modal or workflow where additional information is gathered to be sent in a subsequent request to the server. [Task actions enumerated](https://airtable.com/shr17sBDY41hIlDcW/tbldCBfTWF7PfRggp/viwajGkhg8fJNqTmf?blocks=hide) ## How do tasks and organizations interact? For a more complete look into how tasks and organizations interact, please view this [video recording of a presentation on the subject](https://zoom.us/recording/play/DheNbQYEm5Bwy3hE5sBdQ0a1Xcl44Gs573fp72-UoHNnOvAEGLQDFKcGUZpwkKN_?continueMode=true&startTime=1556124159000&autoplay=true). ## How do I recover if the task tree is in a bad state? When the task tree cannot be restored to the correct state by actions available to Caseflow users (like cancelling a task), the Caseflow application development team can manually correct the state of the task tree. For specific examples of these occasions please visit [the dedicated wiki page](https://github.com/department-of-veterans-affairs/caseflow/wiki/Fixing-task-trees). ## What are Timed Tasks? Tasks indicate that an action needs to be performed by somebody or some automated process. In addition to tasks that indicate some action needs to be taken by a person or some other active system, sometimes an appeal just needs to wait for some time to pass, so we created the [timed task mechanism](https://github.com/department-of-veterans-affairs/caseflow/wiki/Timed-Tasks) as a way to satisfy that need. ## What are Engineering Tasks? An `EngineeringTask` is used to keep Caseflow users aware of engineering work (including long-term Bat Team work) on an appeal, reduce false positives when checking for stuck appeals, and enable more accurate time-keeping when reporting on Caseflow users' time spent on an appeal. For motivating factors, see the `EngineeringTask` Tech Spec #16445. For usage examples, see [the associated RSpec](https://github.com/department-of-veterans-affairs/caseflow/blob/master/spec/models/tasks/engineering_task_spec.rb). The `EngineeringTask` is assigned to a specific engineer when possible; otherwise it is assigned to the Caseflow user (`User.system_user`). One use case is to create a child `EngineeringTask` to block a parent task (e.g., `BvaDispatchTask`) when the complete workflow is not yet implemented (e.g., Unrecognized Appellant work). ## What are Blocking Tasks? ### What Blocking Means There are three general ways we use the concept of \"blocking\" in Caseflow, one general, and two aligned with how a case processes runs. **General Use** Task A is blocking task B if no work can be done on Task B until Task A is completed. Examples here would include Attorney Drafting Tasks blocking Judge Decision Review, Timed Hold Tasks block any task that requests it, etc. This is implemented in two ways, via a child-task relationship of task B to task A in the task tree (eg Attorney Decision Drafting is the child of a Judge Decision Review), or by the explicit creation of Task B upon completion of Task A (eg Judge Assign Task is created when the Distribution Task completes). **Blocks Distribution** Tasks which block distribution are a specific case of general blocking, implemented via the child-task relationship. Tasks which block distribution are created as children of the Distribution Task. A case is ready for distribution only when all children of the Distribution Task are complete. In Evidence Window dockets, the Evidence Submission window blocks distribution. In hearing dockets, [the hearing task & all its children](https://github.com/department-of-veterans-affairs/appeals-team/blob/master/Project%20Folders/Tasks/tasktrees/descr/tasks-overview.md#hearing-phase) block distribution. In Direct Review, there are no tasks blocking distribution by default. All dockets may have their distribution blocked if they receive a Blocking Mail Task. **Blocks Dispatch** As of June 2020, there is _no special handling for blocking dispatch_. Only the general blocking as defined above applies. ### Non blocking In Caseflow, nonblocking tasks can be worked in parallel. This is implemented by having the Tasks be on different branches. All leaf tasks on a task tree can be worked in parallel. Examples include an attorney creating two colocated tasks, or if a non-blocking Mail task comes in. ### The Root Task Every Appeal has one root task. It is used as a container and tracker for the entire case's task tree. The root task is never considered blocked. Tasks created off the Root Task can run in parallel to each other. When any child task of the root task is completed, that task is responsible for creating a new sibling on the root task to track the next stage of the case process. For example, when a Distribution task is completed, the Judge Assign task is created. When the Judge Assign task is completed, the Judge Decision Review Task with a child Attorney Decision Drafting tasks are created. ### Mail Tasks Most tasks of the same type tend to behave the same. Mail Tasks are the exception to this. Some Mail tasks block Distribution, if the case has not yet been sent to a judge for drafting the decision. These mail tasks will block case distribution if they come in before the distribution, pulled June 2020. ```ruby > MailTask.blocking_subclasses => [\"CongressionalInterestMailTask\", \"ExtensionRequestMailTask\", \"FoiaRequestMailTask\", \"HearingRelatedMailTask\", \"PowerOfAttorneyRelatedMailTask\", \"PrivacyActRequestMailTask\", \"PrivacyComplaintMailTask\"] ``` Other Mail Tasks are worked in parallel. Any mail tasks that come in after a case has been distributed are created off the root task, and worked in parallel. See the [Mail Tasks TaskTree Documentation](https://github.com/department-of-veterans-affairs/appeals-team/blob/master/Project%20Folders/Tasks/tasktrees/descr/tasks-overview.md#mailtasks) ### Exceptions `DecisionReviewTask` and `Dispatch::Task`s may follow different paradigms. Hearing Tasks follow general blocking, but may have different flow within the Hearing Task Tree Branch. In Queue, User tasks do not block their matching parent Organization Task. Rather, the pair tend to complete at the same time. Organizations tasks are used by Organization admin users to track the appeal as it is under control of their org. They also give the admin users access to reassign or cancel that user task, as appropriate. User tasks are assigned to individual users within the org to track to actual work of the case. ### Docket Switch Tasks #### Task Behavior The docket switch flow begins with the creation of a `DocketSwitchMailTask` by a user at the Clerk of the Board. This task gets created as a child of the `DistributionTask` to block distribution to a VLJ while the docket switch request is under review. The task gets assigned to that same user whereupon they will send the request to switch dockets to a VLJ. Sending the request to a judge closes the `DocketSwitchMailTask` with a status of `completed`, closes the parent `DocketSwitchMailTask` assigned to the Organization as well, and creates a `DocketSwitchRulingTask`. Once the VLJ decides to either grant or deny the request to switch dockets, that in turn will create either a `DocketSwitchGrantedTask` or `DocketSwitchDeniedTask` and close the `DocketSwitchRulingTask` with a status of `completed`. These are the final tasks within the docket switch task flow. ##### Docket Switch Granted Task Tree ``` Appeal 1639 (D 210726-1639 Original) ────── │ ID │ STATUS │ ASGN_BY │ ASGN_TO │ UPDATED_AT │ └── RootTask │ 6876 │ cancelled │ │ Bva │ 2021-07-27 17:39:06 UTC │ └── DistributionTask │ 6877 │ cancelled │ │ Bva │ 2021-07-27 17:43:28 UTC │ ├── DocketSwitchMailTask │ 6878 │ completed │ │ ClerkOfTheBoard │ 2021-07-27 17:40:40 UTC │ │ └── DocketSwitchMailTask │ 6879 │ completed │ COB_USER │ COB_USER │ 2021-07-27 17:40:40 UTC │ └── DocketSwitchRulingTask │ 6880 │ completed │ COB_USER │ BVAAABSHIRE │ 2021-07-27 17:43:28 UTC │ └── DocketSwitchGrantedTask │ 6881 │ completed │ BVAAABSHIRE │ ClerkOfTheBoard │ 2021-07-27 17:43:28 UTC │ └── DocketSwitchGrantedTask │ 6882 │ completed │ BVAAABSHIRE │ COB_USER │ 2021-07-27 17:43:29 UTC │ └────────────────────────────────────────────────────────────────────────────┘ ``` ##### Docket Switch Denied Task Tree ``` Appeal 1640 (E 210726-1639 Original) ───── │ ID │ STATUS │ ASGN_BY │ ASGN_TO │ UPDATED_AT │ └── RootTask │ 6883 │ on_hold │ │ Bva │ 2021-07-27 17:43:28 UTC │ ├── DistributionTask │ 6884 │ on_hold │ │ Bva │ 2021-07-27 17:43:28 UTC │ │ ├── EvidenceSubmissionWindowTask │ 6885 │ assigned │ │ MailTeam │ 2021-07-27 17:43:28 UTC │ │ ├── DocketSwitchMailTask │ 6887 │ completed │ │ ClerkOfTheBoard │ 2021-07-27 17:45:37 UTC │ │ │ └── DocketSwitchMailTask │ 6888 │ completed │ COB_USER │ COB_USER │ 2021-07-27 17:45:37 UTC │ │ └── DocketSwitchRulingTask │ 6889 │ completed │ COB_USER │ BVAAABSHIRE │ 2021-07-27 17:49:06 UTC │ │ └── DocketSwitchDeniedTask │ 6890 │ completed │ BVAAABSHIRE │ ClerkOfTheBoard │ 2021-07-27 17:49:05 UTC │ │ └── DocketSwitchDeniedTask │ 6891 │ completed │ BVAAABSHIRE │ COB_USER │ 2021-07-27 17:49:06 UTC │ ``` #### Task Creation Upon switching an appeal to a different docket type, and in turn creating a new appeal stream, the task creation process largely mimics when intaking a new appeal. All new appeals will have a `RootTask` and `DistributionTask` with a status of `on_hold`. The new appeal will also have a `DocketSwitchGrantedTask` with a status of `complete` which is shown in the Case Timeline and requires no action. When switching to a `DirectReview` docket, an `InformalHearingPresentation` task will be created as a child of the `DistributionTask` if the appellant has a VSO representing them and that VSO is configured to perform IHPs. When switching to an `EvidenceSubmission` docket, an `EvidenceSubmissionWindowTask` will be automatically created as a child of the `DistributionTask` and with a status of `assigned`. This task signifies the 90-day window during which an appellant may submit additional evidence before the appeal gets distributed to a VLJ. An `InformalHearingPresentation` task will also be created as a child of the `DistributionTask` after the 90-day evidence submission window is complete if the appellant has a VSO representing them and that VSO is configured to perform IHPs. When switching to a `Hearing` docket, a `Hearing` task will be automatically created as a child of the `DistributionTask` and a `ScheduleHearingTask` will be automatically created as a child of the `Hearing` task. Once these tasks are completed by scheduling and holding a hearing, the appeal will be ready for distribution to a VLJ. #### Tasks ineligible to switch dockets Tasks listed below are ineligible to switch dockets. All other tasks will default to switching dockets but the user granting the request can remove these tasks from switching in the UI - Open tasks with children - `RootTask` - Newly created for new appeal stream - `DistributionTask` - Newly created for new appeal stream - `EvidenceSubmissionWindowTask` & children - `HearingTask` & children - `DocketSwitch` tasks - New `DocketSwitchGrantedTask` created for new appeal stream ### Tasks that should have only one open at a time There are certain task types that an appeal should have only one open instance of at a time. Team Echo is currently working with the board to confirm which task types have these restrictions. For an evolving list, please see this github [comment](https://github.com/department-of-veterans-affairs/caseflow/issues/15220#issuecomment-896194415). ",
    "url": "/caseflow/Caseflow%20Queue/Tasks/",
    "relUrl": "/Caseflow%20Queue/Tasks/"
  },"17": {
    "doc": "About Queue",
    "title": "About Queue",
    "content": "# About Queue Caseflow Queue is a workflow management tool that will allow BVA employees process legacy and AMA appeals at the Board. It's also the entry point for Caseflow Reader; users navigate to Reader from Queue. ## [Definitions and term-usage](https://github.com/department-of-veterans-affairs/caseflow/wiki/Queue-data-dictionary) ## Features It contains the following high level features: - [Queue table](https://github.com/department-of-veterans-affairs/caseflow/wiki/Table): Allowing users to view their work (cases with tasks assigned to them) in a table form - [Case details](https://github.com/department-of-veterans-affairs/caseflow/wiki/Case-details): Allowing users to view data about the appeal and Veteran - [Add/Remove/Edit issues](https://github.com/department-of-veterans-affairs/caseflow/wiki/Editing-AMA-issues) - [Automatic case distribution](https://github.com/department-of-veterans-affairs/caseflow/wiki/Automatic-Case-Distribution) - [Organizations](https://github.com/department-of-veterans-affairs/caseflow/wiki/Organizations) - [Tasks](https://github.com/department-of-veterans-affairs/caseflow/wiki/Tasks) - Case timeline - Case search - [[Post Decision Motions]] ## User groups All Board teams use Caseflow Queue to view and complete their tasks. Some branches also use other Caseflow products and features, like the Hearing Branch uses Caseflow Hearings to schedule hearings. Team | Primary Caseflow functionality ---|--- Case Review|Caseflow IntakeCaseflow QueueCaseflow ReaderIssues Mail|Caseflow Queue Translation|Caseflow QueueCaseflow Reader Hearing Branch|Caseflow QueueCaseflow Hearings Privacy Team|Caseflow QueueeFolder Express Decision-drafting attorneys|Caseflow QueueCaseflow ReaderIssues Judges & acting judges |Caseflow QueueCaseflow ReaderCaseflow HearingsIssuesAutomatic Case Distribution [VLJ Support Staff](https://github.com/department-of-veterans-affairs/caseflow/wiki/VLJ-Support)|Caseflow QueueCaseflow Reader [BVA Dispatch](https://github.com/department-of-veterans-affairs/caseflow/wiki/BVA-Dispatch)|Caseflow QueueCaseflow ReaderInteractive Decision Template [Quality Review](https://github.com/department-of-veterans-affairs/caseflow/wiki/Quality-Review)|Caseflow QueueCaseflow Reader Litigation Support | Caseflow QueueCaseflow Reader Advanced on the Docket (AOD)|Caseflow QueueCaseflow Reader [VSOs](https://github.com/department-of-veterans-affairs/caseflow/wiki/VSOs)|Caseflow QueueCaseflow ReaderCaseflow Hearings Private attorneys and claims agents |Caseflow QueueCaseflow ReaderCaseflow Hearings ### Other VA - VA call center ",
    "url": "/caseflow/Caseflow%20Queue/",
    "relUrl": "/Caseflow%20Queue/"
  },"18": {
    "doc": "Diagrams",
    "title": "Diagrams",
    "content": "# Diagrams Testing https://github.com/zhustec/jekyll-diagrams ## blockdiag {% blockdiag %} blockdiag { A -> B -> C -> D; A -> E -> F -> G; } {% endblockdiag %} ## seqdiag {% seqdiag %} seqdiag { browser -> webserver [label = \"GET /index.html\"]; browser webserver [label = \"POST /blog/comment\"]; webserver -> database [label = \"INSERT comment\"]; webserver A [label=a]; S -> B [label=b]; A -> D [label=c]; B -> D [label=d]; } {% endgraphviz %} ## mermaid {% mermaid %} sequenceDiagram participant John participant Alice Alice->>John: Hello John, how are you? John-->>Alice: Great! {% endmermaid %} ## nomnoml {% nomnoml %} [Pirate|eyeCount: Int|raid();pillage()| [beard]--[parrot] [beard]-:>[foul mouth] ] [Marauder][Pirate] [jollyness]->[rum] [jollyness]->[singing] [Pirate]-> *[rum|tastiness: Int|swig()] [Pirate]->[singing] [singing][rum] [st]->[plunder] [plunder]->[more loot] [more loot]->[st] [more loot] no ->[e] [Sailor] - [shiver me;timbers] {% endnomnoml %} ## plantuml {% plantuml %} @startuml class Car Driver - Car : drives > Car *- Wheel : have 4 > Car -- Person : playing : play; playing => stopped : stop; playing => paused : pause; paused => playing : pause; paused => stopped : stop; }; initial => \"tape player off\"; \"tape player off\" => stopped : power; \"tape player on\" => \"tape player off\" : power; {% endsmcat %} ## wavedrom {% wavedrom %} {signal: [ {name: 'clk', wave: 'p.....|...'}, {name: 'dat', wave: 'x.345x|=.x', data: ['head', 'body', 'tail', 'data']}, {name: 'req', wave: '0.1..0|1.0'}, {name: 'ack', wave: '1.....|01.'} ]} {% endwavedrom %} ",
    "url": "/caseflow/diagrams.html",
    "relUrl": "/diagrams.html"
  }
}
