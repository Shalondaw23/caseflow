{"0": {
    "doc": "README",
    "title": "README",
    "content": "Welcome to the GitHub Pages for Caseflow! The webpage can be viewed at http://department-of-veterans-affairs.github.io/caseflow/. | Making changes | Purpose of the gh-pages and main-gh-pages branches | The main-gh-pages branch | Checking out the branch | Committing big changes | Previewing changes | Jekyll | Subsites . | Hugo subsite | HTML subsite | . | FAQ . | How was the gh-pages branch created without a commit history? | Why not use the GitHub Wiki? | Why not use the basic GitHub Pages (without GitHub Actions)? | What GitHub Actions are involved? | . | . ",
    "url": "/caseflow/README.html",
    "relUrl": "/README.html"
  },"1": {
    "doc": "README",
    "title": "Making changes",
    "content": "For small changes, most pages can be modified by clicking on the Edit this page link at the bottom of the page, modifying the md file, and committing the change. For larger changes, checkout the main-gh-pages branch, make local modifications, and push your changes. This will trigger an update to the gh-pages branch used by GitHub Pages. ",
    "url": "/caseflow/README.html#making-changes",
    "relUrl": "/README.html#making-changes"
  },"2": {
    "doc": "README",
    "title": "Purpose of the gh-pages and main-gh-pages branches",
    "content": "The (gh-pages branch) contains the html and asset files displayed by GitHub Pages. The branch is not intended to be merged in the master branch. Note that it has a completely separate commit history from the Caseflow application master branch. For more info, see the FAQ. The gh-pages branch is updated by a build-gh-pages GitHub Action that uses files from the main-gh-pages branch to generate html and asset files, which are pushed to the gh-pages branch. You should not modify the gh-pages branch directly, so you don’t need to git checkout the branch. Any commit to the main-gh-pages branch will trigger the GitHub Action, which can be seen here. See Committing changes for how to make changes. Note that there may be some other GitHub Action that updates the gh-pages branch, so make sure to not cause folder or file name collisions when updating main-gh-pages. ",
    "url": "/caseflow/README.html#purpose-of-the-gh-pages-and-main-gh-pages-branches",
    "relUrl": "/README.html#purpose-of-the-gh-pages-and-main-gh-pages-branches"
  },"3": {
    "doc": "README",
    "title": "The main-gh-pages branch",
    "content": "The main-gh-pages branch has files for documentation. Some are automatically generated (e.g., Caseflow DB schema by a GitHub Action); others are manually created (e.g., Bat Team Remedies). ",
    "url": "/caseflow/README.html#the-main-gh-pages-branch",
    "relUrl": "/README.html#the-main-gh-pages-branch"
  },"4": {
    "doc": "README",
    "title": "Checking out the branch",
    "content": "Even though main-gh-pages is another branch in the Caseflow repo, it is highly encouraged to check out the main-gh-pages branch in a directory separate from caseflow because it has no common files with Caseflow’s master branch and to avoid accidentally deleting git-ignored files in your development branches. To checkout to a caseflow-gh-pages directory as a sibling of your caseflow directory: . cd $YOUR_PATH_TO/caseflow cd .. git clone -b gh-pages --single-branch https://github.com/department-of-veterans-affairs/caseflow.git caseflow-gh-pages . ",
    "url": "/caseflow/README.html#checking-out-the-branch",
    "relUrl": "/README.html#checking-out-the-branch"
  },"5": {
    "doc": "README",
    "title": "Committing big changes",
    "content": "Treat the main-gh-pages branch like Caseflow’s master branch. A difference is that anyone can commit to main-gh-pages without a peer-review (just like the Caseflow wiki page). However for significant changes, it is encouraged to create a development branch and do a squash-merge when you are satisfied with the changes, just like what is done in Caseflow’s master branch. cd caseflow-gh-pages git checkout -b my/add-amazing-new-page # Make modifications, preview changes, and commit git add . git commit # Once ready to merge git checkout main-gh-pages git merge --squash my/add-amazing-new-page git commit # Push to GitHub repo git push . ",
    "url": "/caseflow/README.html#committing-big-changes",
    "relUrl": "/README.html#committing-big-changes"
  },"6": {
    "doc": "README",
    "title": "Previewing changes",
    "content": "To preview changes locally, run the website generators locally as follows: . make run # Alternatively, to run from a clean state: make clean_run . If it’s the first time running it, install some tools: . bundle install make install_jekyll_diagram_dependencies # only needed to view diagrams locally . ",
    "url": "/caseflow/README.html#previewing-changes",
    "relUrl": "/README.html#previewing-changes"
  },"7": {
    "doc": "README",
    "title": "Jekyll",
    "content": "This top-level site uses the Jekyll theme Just the Docs. The help subsite uses a different Jekyll theme, specified in __help/_config.yml. Jekyll can be configured to use plugins. Each md file can define front matter to specify how the corresponding page should be treated or visualized by the Jekyll theme. ",
    "url": "/caseflow/README.html#jekyll",
    "relUrl": "/README.html#jekyll"
  },"8": {
    "doc": "README",
    "title": "Subsites",
    "content": "A subsite is useful for presenting documentation using a different theme or layout. To create a new Jekyll subsite called SUBSITE: . | Create subdirectory __SUBSITE (prefixed with 2 underscores); the underscore prefix is needed so that Jekyll doesn’t process it when building the main site | Create a new __SUBSITE/_config.yml to override the defaults set in __subsite_config.yml | Add a new entry in Makefile to build the html files into destination directory _site/SUBSITE | Add SUBSITE to the keep_files configuration setting in _config.yml so that Jekyll doesn’t delete the _site/SUBSITE directory when building the main site | . Refer to the __help directory as an example. Note that any static site generator besides Jekyll can be used, such as Hugo, Gatsby, and Pelican – adapt the instructions accordingly. Hugo subsite . The Task trees subsite uses Hugo for its speed in processing the hundreds of task md files, among other features. The subsite source files are under the __task_trees folder and follows Hugo’s folder structure. HTML subsite . The Table associations subsite is simply a set of html files under the schema/html folder, which is generated by Jailer run by the make_docs GitHub Action. Jailer queries Caseflow’s DB schema and generates the HTML documentation. Additional bootstrapping was added to Jailer in order for polymorphic associations to be included in the documentation. ",
    "url": "/caseflow/README.html#subsites",
    "relUrl": "/README.html#subsites"
  },"9": {
    "doc": "README",
    "title": "FAQ",
    "content": "How was the gh-pages branch created without a commit history? . git checkout --orphan gh-pages git reset --hard git commit --allow-empty -m \"Initializing gh-pages branch\" git push origin gh-pages git checkout master . (reference) . Also see GitHub’s “Creating your site” instructions. Why not use the GitHub Wiki? . GitHub Wiki has the following limitations: . | Cannot serve up html content or files, along with referenced css files | No table of content generation | No built-in diagramming markup language | While the wiki context can be organized into folder, the wiki presentation doesn’t reflect the organization | Inability to present different documentation types using different styles/themes/layouts | . GitHub Pages provides more control over web page organization and presentation – see next section. Why not use the basic GitHub Pages (without GitHub Actions)? . By default, GitHub Pages employs the Jekyll static site generator to convert md files into html files, all without any additional configuration – see GitHub Pages setup documentation. To enable additional website features and documentation presentation capabilities, a GitHub Action runs Jekyll and potentially other tools to generate the html files for GitHub Pages. The additional capabilities include: . | incorporating sets of generated html files, like Caseflow DB schema created via Jailer | generating table of contents and site navigation menu | using markup syntax to generate diagrams, like diagrams.md | enabling subsites with different website themes/layouts, like the help subsite | quick text search (provided by the Just the Docs theme) | . These capabilities open up opportunities for enhanced presentation of Caseflow documentation, which aims to make information easier to find and understand. What GitHub Actions are involved? . The following GitHub Actions are employed to create this website: . | build-gh-pages in the main-gh-pages branch . | Triggered when changes are pushed to the main-gh-pages branch | Builds this top-level site and subsites (according to the Makefile) . | Installs Ruby, Graphviz, Node, and Python dependencies | Runs Jekyll, Hugo, and other static site generators | Clones Caseflow code to extract code comments and update the task descriptions for the Task trees subsite | Commits updated task descriptions to the main-gh-pages branch (this does not re-trigger this GitHub Action to run) | . | Deploys the files generated in _site to the gh-pages branch, which is displayed by GH Pages | . | make_docs in the main (master) branch . | Triggered when a PR is merged to the main branch | Generates Caseflow database documentation files . | Sets up Caseflow test database | Executes a subset of commands run by make docs | Runs gen_jailer_schema_docs.sh to bootstrap and run Jailer | . | Creates a PR to updates Caseflow database documentation files in the main-gh-pages branch . | Commits updated files to the main-gh-pages branch (this will not trigger the build-gh-pages GitHub Action to run: “An action in a workflow run can’t trigger a new workflow run”) | Creates or updates a PR for the gh-actions/make_docs-update_docs branch. This PR accumulates documentation changes until it is manually merged into the main-gh-pages branch, which will trigger the build-gh-pages GitHub Action. | . | . | . Their execution can be seen under the Actions tab. ",
    "url": "/caseflow/README.html#faq",
    "relUrl": "/README.html#faq"
  },"10": {
    "doc": "Appeal Workflow",
    "title": "Appeal Workflow",
    "content": ". ",
    "url": "/caseflow/workflows/appeal-workflow.html",
    "relUrl": "/workflows/appeal-workflow.html"
  },"11": {
    "doc": "Appeal Workflow",
    "title": "Appeal States",
    "content": ". ",
    "url": "/caseflow/workflows/appeal-workflow.html#appeal-states",
    "relUrl": "/workflows/appeal-workflow.html#appeal-states"
  },"12": {
    "doc": "Automatic Case Distribution",
    "title": "Presentations",
    "content": ". | May 2020 Case Distribution Overview | November 2018 Presentation with cute robots describing how Automatic Case Distribution works | . ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#presentations",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#presentations"
  },"13": {
    "doc": "Automatic Case Distribution",
    "title": "Goal",
    "content": "When a Veterans Law Judge requests cases that are ready for a decision, those cases are drawn from the Board’s various dockets according to a set of rules. Prior to the implementation of the Appeals Modernization Act in February 2019, there was only a single docket, and the distribution of cases could be done by hand. With AMA in place, there are now four dockets, and the rules for distribution have reached a level of complexity that this task now must be automated. This pages describes the rules by which cases are distributed. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#goal",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#goal"
  },"14": {
    "doc": "Automatic Case Distribution",
    "title": "Concepts",
    "content": " ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#concepts",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#concepts"
  },"15": {
    "doc": "Automatic Case Distribution",
    "title": "Docket",
    "content": "A docket is a line. We can generally think of a docket like a first-in, first-out (FIFO) queue, however there are some exceptions to this rule. One is that a case must be “ready” to be distributed, i.e. it must have no other tasks to be completed before a decision is written. So a ready case will be distributed before a non-ready case, even if the non-ready case is ahead of it on the docket. The Board is also allowed a small amount of wiggle room so that it doesn’t have to strictly observe docket order at the cost of efficiency; before AMA this was known as the “docket range,” a number of cases that were close enough to the front of the line to be considered eligible to be distributed. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#docket",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#docket"
  },"16": {
    "doc": "Automatic Case Distribution",
    "title": "Priority",
    "content": "If an appellant is suffering a serious illness, in financial distress, or for another sufficient cause, their appeal can be Advanced on the Docket, or prioritized. If the appellant is older than 75, their appeal is automatically AOD; otherwise, they must file a motion requesting this status. Board decisions can be appealed to the Court of Appeals for Veterans Claims. If CAVC disagrees with the Board’s decision, they will remand it back to the Board for another decision. These post-CAVC remands are also prioritized. There is no differentiation between the various reasons for prioritizing cases. All priority cases are prioritized equally. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#priority",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#priority"
  },"17": {
    "doc": "Automatic Case Distribution",
    "title": "Genpop",
    "content": "Before AMA, if a judge held a hearing with the appellant, that same judge would be required to write the decision on the appeal. We would say that this appeal is “tied to the judge.” A Veteran could waive this right, enabling their appeal to go to any judge. They would be asked to do this if the judge retired, for example. At this point, their case would be deemed “genpop” — eligible to go to any judge. Under AMA, this is no longer a requirement under law. However, it is still preferable for an appeal to go to the same judge who heard the hearing, provided they are still active at the Board. An additional caveat, AOD appeals that are remanded by CAVC are tied to the same judge as wrote the original decision. In the app, appeals that meet either one of these conditions are considered genpop: . | All appeals without a hearing | All appeals with hearings, but none that are held (disposition == \"held\") | All appeals whose most recently held hearing is not tied to any active judge. A judge is considered active if they have logged in within the past 60 days. The hearing date is obtained by joining on the HearingDay table’s scheduled_for field. | . ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#genpop",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#genpop"
  },"18": {
    "doc": "Automatic Case Distribution",
    "title": "Batch size",
    "content": "When a judge requests a distribution of cases, they will receive a certain number of cases in their queue. This number is called the batch size. It is a multiple of the number of attorneys on the judge’s team (currently 3 x the number of attorneys). If the judge does not have their own team, for example if they are a DVC, they receive a set number of cases known as an alternative batch size (currently 15 cases). We also can calculate a number called a total batch size, which is the sum of all of the individual judge’s batch sizes. The total batch size is used as a denominator for calculating things like the optimal percentage of priority cases to distribute. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#batch-size",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#batch-size"
  },"19": {
    "doc": "Automatic Case Distribution",
    "title": "Legacy docket range",
    "content": "The legacy docket combines hearing and non-hearing appeals. As a result, it is not optimal to always grab the frontmost case; there may be cases farther back on the docket that can only be distributed to this specific judge, and it will be advantageous to overall timeliness to distribute them ahead of genpop cases that could be worked by anybody. But we still need to respect docket order, and we do this, similar to how the legacy docket was manually managed, by calculating a docket range. This is the range of cases on the legacy docket that are close enough to the front of the line to be distributed. The legacy docket range is equal to the total batch size, minus the count of priority cases, times the legacy docket proportion (see Docket Proportions below). A hearing case within that range is considered eligible to be distributed to its judge as if it was at the front of the line. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#legacy-docket-range",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#legacy-docket-range"
  },"20": {
    "doc": "Automatic Case Distribution",
    "title": "Ready",
    "content": "Cases considered “ready” for distribution must have all pre-distribution tasks completed. For AMA Appeals, this is simply determined by the state of the appeal’s distribution task. If this task has a status of “assigned”, all child tasks that must be completed for distribution are either complete or cancelled, meaning the appeal is ready for distribution. For legacy appeals, the appeal must meet the following conditions to be considered ready to distribute: . | The appeal must be active at the board (bfmpro of the vacols case is “ACT”) | The appeal must be in case storage (bfcurloc of the vacols case is “81” or “83”) | The appeal must not belong to a special team at the board (bfbox of the vacols case is null) | The appeal must not have any open blocking vacols diaries (tskdcls is null (diary is open) and tskactcd is one of ‘EXT’, ‘HCL’, or ‘POA’ of any associated vacols diary record (diary is a blocking diary type)) | The appeal must not have any open blocking vacols mail (mlcompdate is null (mail task is open) and mltype is NOT one of ‘02’, ‘05’, ‘08’, or ‘13’ of any associated vacols mail record (mail task is a blocking distribution type)) | . appeal = LegacyAppeal.find_by(vacols_id: 3856200) VACOLS::CaseDocket.priority_ready_appeal_vacols_ids.include? appeal.vacols_id =&gt; false # Appeal is considered either not ready or not priority appeal.aod? =&gt; true # Is priority appeal.location_code =&gt; \"81\" # Appeal is in case storage, one of the conditions for \"ready to distribute\" VACOLS::Case.find_by(bfkey: appeal.vacols_id).bfmpro =&gt; \"ACT\" # Appeal is active, one of the conditions for \"ready to distribute\" VACOLS::Case.find_by(bfkey: appeal.vacols_id).bfbox =&gt; nil # Case does not belong to a special team, one of the conditions for \"ready to distribute\" VACOLS::Note.where(tsktknm: appeal.vacols_id, tskdcls: nil, tskactcd: ['EXT', 'HCL', 'POA']).count =&gt; 0 # No blocking diary items in vacols, one of the conditions for \"ready to distribute\" VACOLS::Mail.where(mlfolder: appeal.vacols_id, mlcompdate: nil).pluck(:mltype) =&gt; [\"07\"] # There is an open blocking mail item in vacols, meaning this case is not ready to distribute . ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#ready",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#ready"
  },"21": {
    "doc": "Automatic Case Distribution",
    "title": "AMA dockets",
    "content": "The Appeals Modernization Act created two new dockets, in addition to the existing “legacy” docket, and allowed VA to create as many additional dockets as it wants. VA decided to make one additional docket, bringing the total number to four. 1) Legacy docket. The original flavor docket. This docket contains appeals of decisions before AMA took effect. As there was previously only one docket, the legacy docket contains both hearing and non-hearing appeals. It also has an open record, meaning that evidence can be added to an appeal at any time. 1) Direct Review docket. This AMA docket contains appeals where the Veteran has decided they do not want to add new evidence and do not want a hearing. To encourage people to use this option, the Board has promised that the average number of days to complete appeals on this docket will be 365 days, one year. 1) Evidence Submission docket. On this AMA docket, a Veteran can add evidence during the 90 days after they begin their appeal. There is no timeliness goal for this docket. 1) Hearing Request docket. On this AMA docket, the Veteran has requested a hearing with a judge. They can also submit evidence at their hearing, or during the 90 days after the hearing. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#ama-dockets",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#ama-dockets"
  },"22": {
    "doc": "Automatic Case Distribution",
    "title": "Policy Objectives",
    "content": "In designing the automatic case distribution, there were a number of policy objectives that the team sought to realize. | Priority cases should be balanced among judges. No judge should request a distribution and receive all priority cases. | Priority cases should be distributed quickly. | Docket order should be respected. An appeal that has an earlier docket date should be distributed before one with a later docket date. A certain amount of allowance is made on the legacy docket, where some appeals are tied to judges. In this case, we’ll want to maximize the docket efficiency, that is the extent to which we do not need to look too deep on the docket to find cases for a given judge. | Nonpriority appeals on the Direct Review docket should receive a decision about 365 days after VA received the form starting the appeal. | However, the Board should also start to work some Direct Review cases straight away, and not just wait for one year before starting to work the Direct Review docket. As a result, we want to ramp up to the 365 day timeline. | The other dockets, legacy, Evidence Submission, and Hearing Request, should be balanced proportionately. That is the number of nonpriority cases distributed from each docket should be proportionate to the number of cases on each docket. | Clearing the legacy backlog should be prioritized, but meeting the Direct Review timeliness goal is a higher priority. | . ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#policy-objectives",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#policy-objectives"
  },"23": {
    "doc": "Automatic Case Distribution",
    "title": "Wrangling the dockets",
    "content": " ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#wrangling-the-dockets",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#wrangling-the-dockets"
  },"24": {
    "doc": "Automatic Case Distribution",
    "title": "Priority Target",
    "content": "How much of a given distribution should be priority cases? If we were to just always distribute a priority case if one was available, we would see that some judges would get far more priority cases than others, just by virtue of the timing of their request. Instead, we’ll calculate an optimal number of cases for a given distribution that should be priority. We start by counting all of the priority cases that are ready to be distributed on any docket. We then divide this number by the total batch size to get an target percentage, and then multiply by the individual judge’s batch size (rounding up) to get the target number of priority cases that should be distributed. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#priority-target",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#priority-target"
  },"25": {
    "doc": "Automatic Case Distribution",
    "title": "Docket Proportions",
    "content": "We don’t have to worry about which docket priority cases come from; all priority cases are treated the same. But for nonpriority cases, we must balance the four dockets, calculating the percentage of cases that we want to come from each docket. Direct Review docket . Unlike the other dockets, cases on the Direct Review docket are distributed based on the Board’s 365 day timeliness goal. We do this by giving each Direct Review case a target_decision_date at intake of 365 days after the receipt_date (this allows the Board the option of increasing the goal, while respecting the promises made to Veterans who are already in the door). We can then mark cases as due a set number of days before their target_decision_date. We then count the number of due cases, and like we do with the priority target, divide by the total batch size (this time after excluding the count of priority cases from the denominator) to get the direct review proportion. However, this proportion would remain at zero for nearly a year, waiting for cases to become due, and this is contrary to the Board’s goal of beginning to work these cases immediately. So we will also calculate an interpolated minimum direct review proportion. We use the rate at which Direct Reviews are arriving to calculate a pacesetting proportion, or the proportion of nonpriority decision capacity that would need to go to the Direct Review docket in order to keep pace with what’s arriving. We will then interpolate between 0 and the pacesetting proportion based on the age of the oldest Direct Review in the system. Finally, to accelerate the curve out, we multiply this interpolated figure by the interpolated direct review proportion adjustment. This gives us a curve out of the direct review proportion that would look something like the following: . The “jolt” in this chart shows when the calculation switched from using the interpolated minimum to using the standard due proportion. The direct review proportion is also subject to a maximum. It currently cannot exceed 80%. This prevents a complete halt to work on other dockets should demand for direct reviews approach the Board’s capacity. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#docket-proportions",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#docket-proportions"
  },"26": {
    "doc": "Automatic Case Distribution",
    "title": "Balanced dockets",
    "content": "The other dockets are balanced proportionate to the number of cases on the docket. After the direct review proportion is deducted, the remaining proportions are divided among the other dockets according to their weight, the number of cases waiting. The legacy docket has two exceptions to this rule. First, in addition to counting the cases on the docket, we also count the number of cases where the Agency of Original Jurisdiction has received a Notice of Disagreement but where the appeal has not yet reached the Form 9 stage. We count these cases at a 40% discount, reflecting the likelihood that they will come to the Board and providing a fuller picture of what is waiting. Second, the legacy docket is subject to a 10% minimum. This ensures that even as the legacy docket is winnowed, VA does not let up off the gas of finishing these older cases. Note that the sum of this minimum and the direct review maximum should not exceed 100%. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#balanced-dockets",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#balanced-dockets"
  },"27": {
    "doc": "Automatic Case Distribution",
    "title": "Case distribution",
    "content": " ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#case-distribution",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#case-distribution"
  },"28": {
    "doc": "Automatic Case Distribution",
    "title": "Requested",
    "content": "When a judge requests the distribution, we distribute cases according to the following steps: . 1) We distribute priority legacy cases that are tied to a judge. As many as available, up to the limit of the batch size. 1) We distribute priority AMA hearing cases that are tied to a judge. Again, as many as available. 1) We distribute nonpriority legacy cases that are tied to a judge. We’ll distribute as many as available, but they must be within the legacy docket range. 1) We distribute nonpriority AMA hearing cases that are tied to a judge. As many as available. 1) At this point, we may have distributed some priority appeals. We’ll deduct those appeals from the priority target to get the number of additional priority appeals that we should distribute. We ask each docket for its priority appeals that have been waiting the longest, and distribute the oldest ones up to the priority remaining number, irrespective of docket. 1) We have also potentially distributed some nonpriority appeals from the legacy and AMA hearing dockets. We’ll deduct these cases from the docket proportions. 1) Now we’re ready to distribute the remaining nonpriority cases from each of the dockets according to the updated docket proportions. As some of these proportions may be small, we do this by means of stochastic allocation. 1) If when we try to distribute cases from a given docket, we find that it has no cases that are ready to distribute, we’ll reallocate those cases among the other dockets according to the docket proportions and try again until we’ve found a number of cases equal to the batch size. ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#requested",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#requested"
  },"29": {
    "doc": "Automatic Case Distribution",
    "title": "Priority Push",
    "content": "In an effort to get priority cases to judges without waiting for them to request cases, every Monday morning, aPushPriorityAppealsToJudgesJob is run to push ready priority cases to judges that can receive them. Judges can receive this push if they have an active judge team in caseflow and they hav not been removed from the job. DVCs are in charge of keeping this list of judges up to date and can add and remove judges from this job from the Team Management page. To ensure some judges are not distributed more than others, we first distribute all priority cases that are tied to a judge (non-genpop) to that respective judge. We then look at the number of cases all eligible judges have received in the last month (including the ones just distributed), calculate a target number for each judge that would get us as close to even as possible, and distribute the remaining ready priority genpop appeals based on that calculation. The board is in charge of manually handling any cases that cannot be distributed due to the associated judge being unable to receive cases (they have left the board, they are no longer a judge, they are on vacation, etc). ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#priority-push",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#priority-push"
  },"30": {
    "doc": "Automatic Case Distribution",
    "title": "Further reading",
    "content": "Presentation with cute robots describing how Automatic Case Distribution works Jupyter Notebooks . ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html#further-reading",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html#further-reading"
  },"31": {
    "doc": "Automatic Case Distribution",
    "title": "Automatic Case Distribution",
    "content": " ",
    "url": "/caseflow/caseflow-queues/automatic_case_distribution.html",
    "relUrl": "/caseflow-queues/automatic_case_distribution.html"
  },"32": {
    "doc": "Contents",
    "title": "Contents",
    "content": " ",
    "url": "/caseflow/index",
    "relUrl": "/index"
  },"33": {
    "doc": "Contents",
    "title": "Workflow Diagrams",
    "content": ". | Appeal workflow | Intake workflow | Hearing workflow | . ",
    "url": "/caseflow/index#workflow-diagrams",
    "relUrl": "/index#workflow-diagrams"
  },"34": {
    "doc": "Contents",
    "title": "Database",
    "content": ". | Caseflow DB schema: with diagrams and relevant tables for each Caseflow product | Table associations subsite (created via Jailer): provides SQL joins clauses for basic and polymorphic associations | Task trees subsite: roles, tasks, and statistics from real task trees | . ",
    "url": "/caseflow/index#database",
    "relUrl": "/index#database"
  },"35": {
    "doc": "Contents",
    "title": "Help and examples",
    "content": ". | README | Help subsite . | Diagram examples | Jekyll | . | . ",
    "url": "/caseflow/index#help-and-examples",
    "relUrl": "/index#help-and-examples"
  },"36": {
    "doc": "Contents",
    "title": "List of pages",
    "content": ". | Contents | Appeal Workflow | Schema Diagrams | Automatic Case Distribution | Intake Workflow | Data Model &amp; Dictionary | Hearing Workflow | Tasks | README | Workflows | DB Schema | Caseflow Queue | Bat Team | . ",
    "url": "/caseflow/index#list-of-pages",
    "relUrl": "/index#list-of-pages"
  },"37": {
    "doc": "Contents",
    "title": "Testing",
    "content": "Preview dark theme . Bat Team Items (Jekyll collection test) . | Dispatch_stuck, , ok tags: batteam, dispatch”, and stuck . | Bat Team, , tags: . | . ",
    "url": "/caseflow/index#testing",
    "relUrl": "/index#testing"
  },"38": {
    "doc": "DB Schema",
    "title": "Manual documentation",
    "content": "See Caseflow Data Model &amp; Dictionary. Participant IDs . A participant ID is provided by BGS to uniquely identify (1) Claimants (who may be Veterans) and (2) POA entities (which can be an organization or individual). Several tables refer to the participant ID by different names, depending on who they are referencing. A participant ID for a POA is usually named poa_participant_id, for example in the DB tables: appeals, appellant_substitutions, bgs_power_of_attorneys, and unrecognized_appellants. Some exceptions are the bgs_attorneys and organizations tables, which simply use participant_id. Note: For the organizations table, only organizations with type=\"Representative\" have a non-null participant_id. A participant ID for a claimant or veteran goes by several names, such as claimant_participant_id, veteran_participant_id, and substitute_participant_id. The claimants, veterans, people, and decision_issues tables simply use participant_id. ",
    "url": "/caseflow/schema/db_schema.html#manual-documentation",
    "relUrl": "/schema/db_schema.html#manual-documentation"
  },"39": {
    "doc": "DB Schema",
    "title": "Semi-automated documentation",
    "content": ". | Ever want to see the schema for a subset of tables? Paste excerpts from schema.rb and “Import” into http://dbdiagram.io/, then move the boxes around to your liking. Example diagram of Document-related tables and more in ticket #15510. | Extending previous work on parent-child task type relationships (such as this for the DR docket) and playing with Jupyter notebook, here’s an interactive graph showing parent-child task type relationships for all task trees in prod as of July 19, 2020. | Some diagrams and documentation of Caseflow’s DB schema created in Oct 2019. | . ",
    "url": "/caseflow/schema/db_schema.html#semi-automated-documentation",
    "relUrl": "/schema/db_schema.html#semi-automated-documentation"
  },"40": {
    "doc": "DB Schema",
    "title": "Autogenerated documentation",
    "content": "See Schema Diagrams. ",
    "url": "/caseflow/schema/db_schema.html#autogenerated-documentation",
    "relUrl": "/schema/db_schema.html#autogenerated-documentation"
  },"41": {
    "doc": "DB Schema",
    "title": "DB Schema",
    "content": "This page is a resource to understand Caseflow’s database. ",
    "url": "/caseflow/schema/db_schema.html",
    "relUrl": "/schema/db_schema.html"
  },"42": {
    "doc": "Dispatch claim being “stuck”",
    "title": "Dispatch claim being “stuck”",
    "content": "If I receive a support issue regarding Caseflow Dispatch claim being “stuck”. | Look for a Sentry error in #appeals-dispatch channel. | If the error is related to AASM::InvalidTransition, that means the state transition is invalid. | Find the associated dispatch task in the dispatch_tasks table. | Choose the appropriate state for the task by referencing the aasm machine in Dispatch::Task model and update the task manually using production console. | Example of a similar problem can be found here. | . ",
    "url": "/caseflow/batteam/dispatch/dispatch_stuck.html",
    "relUrl": "/batteam/dispatch/dispatch_stuck.html"
  },"43": {
    "doc": "Hearing Workflow",
    "title": "Hearing Workflow",
    "content": ". | Caseflow Hearings | HearingTask | . ",
    "url": "/caseflow/workflows/hearing-workflow.html",
    "relUrl": "/workflows/hearing-workflow.html"
  },"44": {
    "doc": "Hearing Workflow",
    "title": "AMA Hearing",
    "content": "For Hearing docket. | Hearing Coordinator schedules hearing in docket order, resolving HearingAdminActions before hearing can be scheduled. | Hearing is scheduled. | VLJ preps for meeting using Caseflow Hearing and Reader. | Judge corrects issues on appeal while prepping using Intake’s issue editing capability | . | Hearing happens . | four types of hearings: travel, in person, video hearings, and virtual hearings | . | For Judges, the Daily Docket is primarily used to update the hearing’s disposition or mark the case Advance on Docket (AOD). Hearing coordinators may update disposition but will more often use it to update the hearing’s time. | The HearingDispositionChangeJob automatically locks a Hearing Day 24 hours after the hearing date – https://github.com/department-of-veterans-affairs/caseflow/wiki/Caseflow-Hearings#locking-a-hearing | . | Assigns Hearing Disposition: held, cancelled, no show, postponed . | See https://github.com/department-of-veterans-affairs/appeals-team/blob/master/Project%20Folders/Tasks/tasktrees/task_descr/HearingTask_Organization.md | . | Hearing recording is transcribed and then entered into VBMS | Mail team intakes evidence window waiver mail . | Veteran can send in mail, which is processed by the BVA Intake team, before the decision is written up. | . | . ",
    "url": "/caseflow/workflows/hearing-workflow.html#ama-hearing",
    "relUrl": "/workflows/hearing-workflow.html#ama-hearing"
  },"45": {
    "doc": "Hearing Workflow",
    "title": "AMA Hearing vs. Legacy Hearing",
    "content": "A HearingDay organizes Hearings and LegacyHearings by regional office and hearing room. ",
    "url": "/caseflow/workflows/hearing-workflow.html#ama-hearing-vs-legacy-hearing",
    "relUrl": "/workflows/hearing-workflow.html#ama-hearing-vs-legacy-hearing"
  },"46": {
    "doc": "Caseflow Queue",
    "title": "About Queue",
    "content": "Caseflow Queue is a workflow management tool that will allow BVA employees process legacy and AMA appeals at the Board. It’s also the entry point for Caseflow Reader; users navigate to Reader from Queue. ",
    "url": "/caseflow/caseflow-queues/#about-queue",
    "relUrl": "/caseflow-queues/#about-queue"
  },"47": {
    "doc": "Caseflow Queue",
    "title": "Definitions and term-usage",
    "content": " ",
    "url": "/caseflow/caseflow-queues/#definitions-and-term-usage",
    "relUrl": "/caseflow-queues/#definitions-and-term-usage"
  },"48": {
    "doc": "Caseflow Queue",
    "title": "Features",
    "content": "Please see the TOC below for a list of high lever features . ",
    "url": "/caseflow/caseflow-queues/#features",
    "relUrl": "/caseflow-queues/#features"
  },"49": {
    "doc": "Caseflow Queue",
    "title": "User groups",
    "content": "All Board teams use Caseflow Queue to view and complete their tasks. Some branches also use other Caseflow products and features, like the Hearing Branch uses Caseflow Hearings to schedule hearings. | Team | Primary Caseflow functionality | . | Case Review | Caseflow IntakeCaseflow QueueCaseflow ReaderIssues | . | Mail | Caseflow Queue | . | Translation | Caseflow QueueCaseflow Reader | . | Hearing Branch | Caseflow QueueCaseflow Hearings | . | Privacy Team | Caseflow QueueeFolder Express | . | Decision-drafting attorneys | Caseflow QueueCaseflow ReaderIssues | . | Judges &amp; acting judges | Caseflow QueueCaseflow ReaderCaseflow HearingsIssuesAutomatic Case Distribution | . | [VLJ Support Staff](https://github.com/department-of-veterans-affairs/caseflow/wiki/VLJ-Support) | Caseflow QueueCaseflow Reader | . | [BVA Dispatch](https://github.com/department-of-veterans-affairs/caseflow/wiki/BVA-Dispatch) | Caseflow QueueCaseflow ReaderInteractive Decision Template | . | [Quality Review](https://github.com/department-of-veterans-affairs/caseflow/wiki/Quality-Review) | Caseflow QueueCaseflow Reader | . | Litigation Support | Caseflow QueueCaseflow Reader | . | Advanced on the Docket (AOD) | Caseflow QueueCaseflow Reader | . | [VSOs](https://github.com/department-of-veterans-affairs/caseflow/wiki/VSOs) | Caseflow QueueCaseflow ReaderCaseflow Hearings | . | Private attorneys and claims agents | Caseflow QueueCaseflow ReaderCaseflow Hearings | . Other VA . | VA call center | . ",
    "url": "/caseflow/caseflow-queues/#user-groups",
    "relUrl": "/caseflow-queues/#user-groups"
  },"50": {
    "doc": "Caseflow Queue",
    "title": "Caseflow Queue",
    "content": " ",
    "url": "/caseflow/caseflow-queues/",
    "relUrl": "/caseflow-queues/"
  },"51": {
    "doc": "Caseflow Dispatch",
    "title": "Caseflow Dispatch",
    "content": "Caseflow Dispatch . ",
    "url": "/caseflow/batteam/dispatch/",
    "relUrl": "/batteam/dispatch/"
  },"52": {
    "doc": "Bat Team",
    "title": "Bat Team",
    "content": "Bat Team . ",
    "url": "/caseflow/batteam/",
    "relUrl": "/batteam/"
  },"53": {
    "doc": "Workflows",
    "title": "Workflows",
    "content": " ",
    "url": "/caseflow/workflows/",
    "relUrl": "/workflows/"
  },"54": {
    "doc": "Intake Workflow",
    "title": "Intake Workflow",
    "content": "Intake creates data that can trace a claim through its initial decision, through any requests to contest that decision or subsequent decisions, all the way to the final decision(s). It helps present data to veterans in the same way they already view decision reviews, as an extension to their original claim. Issues presentation . ",
    "url": "/caseflow/workflows/intake-workflow.html",
    "relUrl": "/workflows/intake-workflow.html"
  },"55": {
    "doc": "Intake Workflow",
    "title": "Mail Intake",
    "content": ". ",
    "url": "/caseflow/workflows/intake-workflow.html#mail-intake",
    "relUrl": "/workflows/intake-workflow.html#mail-intake"
  },"56": {
    "doc": "Intake Workflow",
    "title": "Business Lines",
    "content": "Once Intake is done, there are 3 major flows for AMA decision review: . | HLR &amp; SC (Compensation and Pension) - in VBMS . | Request issues are represented as contentions on EPs in VBMS | Request issues (in the same appeal) can map to contentions in different EPs. | Once EP is cleared/completed, Caseflow loads the new rating issues (and dispositions) to create VA decision issues on AMA decision reviews. | A decision issue maps to only one rating issue or nothing. | . | HLR &amp; SC (other business lines) - in Caseflow . | One queue for each non-VBMS business line. | No EPs or contentions. For each request issue, create a decision issue with the disposition. | . | Board Appeals - in Caseflow . | Attorneys create decision issues, not raters. | Dispositions on decision issues get outcoded to contentions on a new(?) EP, and a new rating issue is created. | The only purpose of the EP is to email the person of the decision. | . | . | Only VBA Compensation and Pension business lines use ratings (and VBMS). | The 7 other business lines use nonrating request issues. | Unidentified issues should be resolved before making decisions on them. Otherwise, they will be considered ineligible. | . ",
    "url": "/caseflow/workflows/intake-workflow.html#business-lines",
    "relUrl": "/workflows/intake-workflow.html#business-lines"
  },"57": {
    "doc": "Intake Workflow",
    "title": "Decision Review Lanes",
    "content": ". ",
    "url": "/caseflow/workflows/intake-workflow.html#decision-review-lanes",
    "relUrl": "/workflows/intake-workflow.html#decision-review-lanes"
  },"58": {
    "doc": "Intake Workflow",
    "title": "Caseflow and EPs",
    "content": ". ",
    "url": "/caseflow/workflows/intake-workflow.html#caseflow-and-eps",
    "relUrl": "/workflows/intake-workflow.html#caseflow-and-eps"
  },"59": {
    "doc": "Intake Workflow",
    "title": "After Dispatched",
    "content": ". ",
    "url": "/caseflow/workflows/intake-workflow.html#after-dispatched",
    "relUrl": "/workflows/intake-workflow.html#after-dispatched"
  },"60": {
    "doc": "Intake Workflow",
    "title": "Intake Models",
    "content": "Intake Data Model . | Ratings and rating issues are stored in the VBA Corp DB. | Caseflow and VBMS both use BGS, which queries Corp DB. | . | Request issues can also match legacy issues in VACOLS. | Veteran can choose to close the VACOLS legacy issue with a disposition designating that it’s been opted into the AMA process. | . | . ",
    "url": "/caseflow/workflows/intake-workflow.html#intake-models",
    "relUrl": "/workflows/intake-workflow.html#intake-models"
  },"61": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Data Model &amp; Dictionary",
    "content": "This page provides information about Caseflow’s data model, data dictionary, and resources to help understand Caseflow’s database contents (terminology and example data-dictionaries). The main audience are Caseflow engineers, BVA’s Reporting Team, those who know SQL, and onboarders. This page consists of these major sections: . | By product | By workflow | By page | (Feel free to add another section if desired) | . Also check out [[Caseflow Database Schema Documentation]]. Instructions: . | Document any non-obvious semantics or logic that would be useful when interpreting database tables and constituent data. | Reference other relevant wiki pages to provide context/background. | Link to relevant code (in case it changes in the future). | . | To create tables diagram, go to http://dbdiagram.io/, click “Import”, and paste table definition excerpts from schema.rb; then add cross-table links using the mouse and move the boxes around to your liking. Click “Save” and copy the URL to this page. | Note: you can only import once; try it a couple of times to get a hang of it before spending too much time. | Table columns with *** in the name are used to designate categories of columns. In the Certifications diagram, you will see a column titled _initial *** in the Form8s table. The Form8s table has twelve columns beginning with “_initial”: _initial_appellant_name, _initial_appellant_relationship, etc. To keep the diagram and tables more tidy we grouped these categories together. | Pro-tip: Open another browser tab, paste the new excerpt, then copy-and-paste the resulting Table definition into the original tab. | To insert a screenshot of the diagram, paste the image into a comment on ticket #15510, which will upload the image to GitHub and provide a URL for the image, which can then be linked from this page. | . | . ",
    "url": "/caseflow/schema/model_and_dict.html",
    "relUrl": "/schema/model_and_dict.html"
  },"62": {
    "doc": "Data Model &amp; Dictionary",
    "title": "By product",
    "content": " ",
    "url": "/caseflow/schema/model_and_dict.html#by-product",
    "relUrl": "/schema/model_and_dict.html#by-product"
  },"63": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Caseflow Certification",
    "content": ". | Certification tables diagram | . Certifications . Caseflow Certification ensures accurate Veteran and appeal information are transferred from the Veterans Benefits Administration (VBA) to the Board of Veterans Appeals (BVA). The Certifications table facilitates this process by ensuring necessary documentation has been submitted with an Appeal and is consistent between VBMS and VACOLS. Caseflow Certification is also responsible for verifying the veteran’s representation and hearings request are accurate and ready to be sent to the Board. | poa_correct_in_bgs | poa_correct_in_vbms | nod_matching | soc_matching | already_certified | . Form8s . Once an Appeal has been certified, the information on a Form8 form will be sent to the Board and the representation and hearing information will be updated in VACOLS accordingly. | hearing_requested | hearing_held: nil if hearing_requested set to No | certification_date | soc_date | power_of_attorney information pulled from BGS | . LegacyAppeals . The LegacyAppeals table stores records of non-AMA appeals, appeals which originated in VACOLS, that are worked by Caseflow. | changed_request_type is either the value of R representing a virtual hearing or V representing a video hearing. Those are the only two options when updating a hearing request | vbms_id is either the Veteran’s file number + “C” or the Veteran’s SSN + “S” | . CertificationCancellations . The CertificationCancellations table stores instances of cancelled certifications. | cancellation_reason can be one of the following: . | VBMS and VACOLS dates didn't match and couldn't be changed | Missing document could not be found | Pending FOIA request | Other | . | . Relationships . In the diagram below you will see the certifications table’s id is stored on the certification_cancellations table as well as the form8s table. The form8s table connects with the certifications table through the certification_date, representative_name, representative_type, and vacols_id, which also connects it with the legacy_appeals table. It is connected with a Veteran by storing the veteran_file_number. ",
    "url": "/caseflow/schema/model_and_dict.html#caseflow-certification",
    "relUrl": "/schema/model_and_dict.html#caseflow-certification"
  },"64": {
    "doc": "Data Model &amp; Dictionary",
    "title": "eFolder Express",
    "content": ". | eFolder Express tables diagram | . Caseflow eFolder Express (EE) serves the specific role of allowing users to bulk download all of a Veteran’s files at once. It is the only Caseflow product that has a separate code repository and runs on separate servers. Records . When mentioning a Veteran’s files in EE, those can vary between PDFs, TIFFs, and IMGs. The Records table exists to store references to these files . Manifests . As mentioned above, the purpose of EE is to allow users to download all of a Veteran’s files at once. The reasoning for this is to reduce the need for the user to select and download files individually. A Manifest represents the collection of all of a Veteran’s files and consists of a ManifestSource for each file, pointing to its source. ManifestSources . The sources for files made available for download in EE are VBMS and Virtual VA (VVA). A ManifestSource groups a set of Records to allow all of a Veteran’s files to be downloaded at the same time. | name: Either “VBMS” or “VVA” | status: Stores whether a Record was successfully added to a Manifest | . FileDownloads . When a user searches for the Veteran they are looking for in EE, they are presented with a view of all files available for download. The FileDownloads table stores each time a user downloads all of a Veteran’s files. Relationships . In the diagram below you can see that every FileDownload will store a manifest_id, as well as every ManifestSource. This makes sense given the fact that a Manifest is a collection of ManifestSources, with each ManifestSource containing a Record. The files indirectly referenced by a Manifest can be downloaded as many times as needed. ",
    "url": "/caseflow/schema/model_and_dict.html#efolder-express",
    "relUrl": "/schema/model_and_dict.html#efolder-express"
  },"65": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Caseflow Dispatch",
    "content": ". | Caseflow Dispatch | BVA Dispatch | Dispatch tables diagram | . Caseflow Dispatch exists to create EndProducts in VBMS from completed cases in VACOLS. Users of Dispatch, VBA Office of Administrative Review (OAR) employees, are presented with VACOLS cases that have received a decision and need to be routed to the correct VBA entity to update a Veteran’s benefits. LegacyAppeals . The LegacyAppeals table is utilized by numerous Caseflow products. A description can be found above in the Certification section. DispatchTasks . Caseflow tasks designate what action needs to be taken on an appeal and who is responsible for taking said action. There are a wide variety of tasks across Caseflow products, but the Dispatch::Tasks table currently only stores EstablishClaim task records which are used to create the EndProduct in VBMS. You can read more about tasks here. | aasm_state | user_id gets assigned upon clicking “Establish Next Claim” in Dispatch | . Users . Caseflow users are distinguished by their role, with different roles having different permissions and thus different capabilities made available to them. | roles: All of the user’s roles | css_id: A unique identifier for VA employees or contractors | . Relationships . In the diagram below, you will see that the dispatch_tasks tables stores the id of the user assigned to the task as well as the id of the legacy_appeal. The legacy_appeals tables does not store any dispatch_task ids because each appeal can have many dispatch_tasks. ",
    "url": "/caseflow/schema/model_and_dict.html#caseflow-dispatch",
    "relUrl": "/schema/model_and_dict.html#caseflow-dispatch"
  },"66": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Caseflow Intake",
    "content": ". | Intake | Caseflow Intake | Intake Data Model | Intake tables diagram | . Decision Reviews . Intake is the source of all AMA decision review request submissions. There are three decision review lanes: Appeals, HigherLevelReviews, and SupplementalClaims. Class diagram of relevant terminology: . | DecisionReview . | Appeal | ClaimReview . | SupplementalClaim | HigherLevelReview | . | . | . Appeals . Appeals represent an AMA review that gets filed with the Board of Veterans’ Appeals (BVA). Refer to Intake tables diagram below. | docket_type can be one of the following: . | direct_review - No new evidence and not requesting a hearing | evidence_submission - New evidence but not requesting a hearing | hearing - Submit new evidence and want to testify before a VLJ | . | poa_participant_id: Power of Attorney (POA) is connected to legacy appeals in VACOLS and Veterans in BGS. Since this model represents AMA appeals, we are getting this data from BGS | veteran_is_not_claimant: A claimant on an appeal does not have to be the Veteran. It can be a spouse, child, or even an attorney. | . Claim Reviews (i.e., HigherLevelReviews and SupplementalClaims) . A HigherLevelReview and SupplementalClaim are a type of ClaimReviews. These ClaimReviews are sent to the Veterans Benefit Administration (VBA) and differentiate from Appeals in that they include a benefit type. Benefit types of compensation and pension are processed in VBMS, where as the rest are processed in Caseflow. RequestIssues . RequestIssues are submitted as part of a DecisionReview and represent a specific issue a Veteran is facing, such as hearing loss or sleep apnea. There are three categories of RequestIssues: rating, non-rating, and unidentified. EndProductEstablishments . The EndProductEstablishment model exists in Caseflow to represent EndProducts created in VBMS. End Products are created for Higher Level Reviews and Supplemental Claims that are compensation or pensions and for Board Grant Effectuations that have granted compensation and pension issues on appeals. Relationships . In the diagram below you can see that the appeals, supplemental_claims, and higher_level_reviews table’s id will correspond with the request_issues table’s decision_review_id as well as the end_product_establishments table’s source_id. Also note that the request_issues table’s id is referenced by the end_product_establishments table. The end_product_establishments table’s source_type is the same as the request_issues table’s decision_review_type. ",
    "url": "/caseflow/schema/model_and_dict.html#caseflow-intake",
    "relUrl": "/schema/model_and_dict.html#caseflow-intake"
  },"67": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Caseflow Hearings",
    "content": ". | Caseflow Hearings | Hearing Request Type | Hearings tables diagram | . Hearings . Veterans have the option to have a hearing with a Veterans Law Judge (VLJ) as part of the appeals process. At these hearings, a VLJ meets with a veteran or representative to go over the case. It is not a defense but a chance for a Veteran to provide additional details. After a hearing is conducted, the recordings are sent to the transcription office, and then entered into VBMS. There are four types of hearings: . | Central Hearing: An in-person hearing at BVA’s central office (425 I st.) | Video Hearing: A hearing over video conference conducted between a regional office or alternate hearing location and central office | Virtual Hearing: a hearing over video conference conducted between any location (sometimes the representative’s office) and central office | Travel Board: An in person hearing where the VLJ travels to the regional office. These are not currently supported by Caseflow and are handled in VACOLS. If Caseflow serves Travel Board hearings it will be only through converting them to video or virtual hearings. | . HearingDays . A HearingDay organizes Hearings and LegacyHearings by regional office and hearing room. | A hearing day is assigned to one judge, although hearing coordinators have the ability to override the hearing day’s judge on the Hearings table or in VACOLS by editing the hearing details. | Each room / HearingDay has a maximum number of hearings that can be held (slots) that are determined by the regional office’s timezone. If a hearing day’s slots are filled, the coordinator will receive a warning when scheduling a Veteran (“You are about to schedule this Veteran on a full docket. Please verify before scheduling”) but will still be able to schedule if they so choose. | request_type : R for virtual, V for video, C for central | regional_office: If the request_type is V, then the HearingDay will be associated to a regional office | judge_id | scheduled_for | . LegacyHearings . Legacy Hearings are hearings for cases that originated inside of VACOLS. On a judge’s Hearing Worksheet, they can edit Legacy hearing issues directly on the workbook page (for AMA cases, they would need to go to the Case Details page). Task . All appeals on the hearing docket have a series of tasks that can be divided into five groups. Here is a brief summary of what those are, full description can be found here. | Initial tasks - these include creating a HearingTask with a child ScheduleHearingTask. For AMA cases, the initial hearing tasks are created as a children of the DistributionTask after intake. For Legacy cases, a geomatching job finds all appeals in VACOLS that are ready to be scheduled and creates a hearing task tree as a child of the RootTask. | Schedule Veteran tasks - schedule hearing tasks are shown on the assign hearings page (see this page. A coordinator can block scheduling by adding a HearingAdminActionTask and can also withdraw the hearing. After scheduling, a AssignHearingDispositionTask and a new hearing is created and that hearing is associated to the HearingTask with an HearingTaskAssociation. | Assign a Disposition - Postponing cancels the current hearing task and recreates the initial hearing task tree. If a coordinator or judge changes the hearing’s disposition on the daily docket, the HearingDispositionChangeJob finds all appeals with hearings in the last 24 hours and creates a AssignHearingDispositionTask and completes the task based on the disposition. No-show hearings are given a NoShowHearingTask. | Transcription/Evidence submission - After a disposition is assigned, AMA appeals must complete a TranscriptionTask and an EvidenceSubmissionWindowTask. The evidence task gives the Veteran an additional 90 days to submit evidence before the case is distributed. | Case Distribution - When all other hearing tasks are completed, a case is ready for distribution to judge because its DistributionTask is moved from on_hold to assigned (AMA cases) or the case is in case storage location 81 (legacy cases). See also automatic case distribution. | . VirtualHearings . Once a virtual hearing is scheduled, the associated record in hearing_days is not changed because a record in the hearing_days table represents the whole day. In other words, many hearing types are associated with that hearing_days record, so hearing_days.request_type should not be changed. This is an artifact of how the virtual hearings feature was introduced into Caseflow, i.e., as a conversion of video hearings into virtual hearings. virtual_hearings, virtual_hearing_establishments, and sent_hearing_email_events table descriptions . Relationships . In the diagram below you can see the following relationships between various hearing-related tables: . | The hearings and legacy_hearings table’s id corresponds with the hearings_tasks_assocations and virtual_hearings table’s hearing_id. | The hearings and legacy_hearings table’s hearing_day_id corresponds with the hearing_days table’s id. | The hearings_tasks_assocations table’s hearing_task_id corresponds with the tasks table’s id. | . ",
    "url": "/caseflow/schema/model_and_dict.html#caseflow-hearings",
    "relUrl": "/schema/model_and_dict.html#caseflow-hearings"
  },"68": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Caseflow Queue",
    "content": ". | Caseflow Queue . | Organizations | Tasks . | Tasks talk | . | . | Queue tables diagram . | Appeal, Task | User, OrganizationsUser, Organization, JudgeTeam organizations | . | . Appeals . Queue is the portion of Caseflow users utilize when an appeal has reached the Decision phase and is ready to be reviewed by judges and attorneys for processing. Queue services both AMA and Legacy appeals, the behavior of each varying slightly. One of the main differences is that AMAs are contained within Caseflow whereas much of the data for Legacy appeals is extracted from VACOLS. Tasks . User interaction with specific appeals is dependent on the type of task on the appeal that’s been assigned to them. For instance, a JudgeAssignTask is given to a judge so that they may assign an AttorneyTask to an attorney on their team to draft a decision. A more thorough breakdown of Queue tasks can be found in the Decision phase portion of the task tree documentation . Organizations . Users can be added to organizations so that we can control the types of permissions and task action options alotted to them. For instance, JudgeTeams are comprised of a judge along with their team of attorneys. This allows the judge to assign cases to these individuals in the same flow mentioned in the Task description. Relationships . In the following diagram, you can see that an id on an AMA or Legacy appeal will correspond with the appeal_id on a task created on that appeal. An assigned_by_id or assigned_to_id will correspond with the id of the user who has either assigned or been assigned a task . Finally, organization_users is representative of a users relationship to a particular type of organization. Therefore the users table’s id will correspond with the user_id and the organizations table’s id will correspond with the organization_id. ",
    "url": "/caseflow/schema/model_and_dict.html#caseflow-queue",
    "relUrl": "/schema/model_and_dict.html#caseflow-queue"
  },"69": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Caseflow Reader",
    "content": ". | Caseflow Reader and Reader Backend | Reader tables diagram | . Documents . Caseflow Reader allows users to access all of the documents related to the Veteran for an appeal. Users first interact with a document list page which presents a list of the documents. Upon selection of a particular document, they are redirected to the document view page where they can view and interact with the document. Documents are populated by eFolder, which retrieves them from two upstream dependencies: VBMS &amp; VVA – see Reader Backend for details. Annotations . On the document view page, users have the ability to add comments to documents via the “Add a comment” button. A comment is stored in the annotations table. Once a comment is created, it can be edited, shared via a link or deleted. In addition, comments can be seen on the document list page under the “Comment” column for the related document and also by selecting the “Comments” button which shows all comments. Tags . Tags can be added by the user to further label and categorize documents based on issues that they identify. On the document view page, users may create a tag within the sidebar under the “Issue tags” dropdown section. Once a tag is created, it is saved (in the tags table) so that it is available for use on other documents. Tags can also be deleted by the user. DocumentViews . Caseflow keeps track of when a user has viewed a document so the user is aware of which ones they have already opened. To do this, documents in the document list are initially shown in bold text, however once a user has viewed a document, the text will no longer be bold. Relationships . When a tag is created for a document, the user can apply it on other documents that may be relevant. The document_tags table keeps track of which tags apply to which documents. The id of the tags table corresponds to the tag_id, and the id of the documents table corresponds to the documents_id. To track which document a comment/annotation is created for, the id from the documents table corresponds with the document_id on the annotations table. To track when a document has been viewed by a user we have the document_views table, the id from the documents table corresponds with the document_id in the document_views table, and the user_id refers to the id in the users table. ",
    "url": "/caseflow/schema/model_and_dict.html#caseflow-reader",
    "relUrl": "/schema/model_and_dict.html#caseflow-reader"
  },"70": {
    "doc": "Data Model &amp; Dictionary",
    "title": "By workflow",
    "content": " ",
    "url": "/caseflow/schema/model_and_dict.html#by-workflow",
    "relUrl": "/schema/model_and_dict.html#by-workflow"
  },"71": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Case Distribution workflow",
    "content": ". | Distribution, CaseDistribution, Task | Case Distribution tables diagram | . ",
    "url": "/caseflow/schema/model_and_dict.html#case-distribution-workflow",
    "relUrl": "/schema/model_and_dict.html#case-distribution-workflow"
  },"72": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Judge and Attorney Checkout workflow",
    "content": ". | RequestIssue, DecisionIssue, RequestDecisionIssue | SpecialIssuesList | JudgeCaseReview, AttorneyCaseReview | JudgeTeam Checkout tables diagram | . ",
    "url": "/caseflow/schema/model_and_dict.html#judge-and-attorney-checkout-workflow",
    "relUrl": "/schema/model_and_dict.html#judge-and-attorney-checkout-workflow"
  },"73": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Motion-To-Vacate workflow",
    "content": ". | A PostDecisionMotion record is created with these possible dispositions, the vacated_decision_issue_ids (which reference DecisionIssue records), and a task_id (which references a Task record, which is associated to an appeal). | . ",
    "url": "/caseflow/schema/model_and_dict.html#motion-to-vacate-workflow",
    "relUrl": "/schema/model_and_dict.html#motion-to-vacate-workflow"
  },"74": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Docket Switch workflow (for AMA appeals)",
    "content": ". | A DocketSwitch record is created with these possible dispositions and list of granted_request_issue_ids (which reference RequestIssue records). | Each DocketSwitch record references the original and new appeals via old_docket_stream_id and new_docket_stream_id respectively. | Both appeals have the same docket number and appellant. | The two appeals can have different docket type, request issues, tasks, etc. | . | Why create a new appeal? See this Google Doc | More Google docs | . ",
    "url": "/caseflow/schema/model_and_dict.html#docket-switch-workflow-for-ama-appeals",
    "relUrl": "/schema/model_and_dict.html#docket-switch-workflow-for-ama-appeals"
  },"75": {
    "doc": "Data Model &amp; Dictionary",
    "title": "CAVC Remand workflow (for AMA appeals)",
    "content": ". | A CavcRemand record is created with details from CAVC and list of decision_issue_ids (which reference DecisionIssue records). | Each CavcRemand record references the source and new appeals via source_appeal_id and remand_appeal_id respectively. | Both appeals have the same docket number and appellant. The new appeal has docket type = court_remand. | The two appeals can have different request issues, tasks, etc. | . | CAVC Remand wiki page | . ",
    "url": "/caseflow/schema/model_and_dict.html#cavc-remand-workflow-for-ama-appeals",
    "relUrl": "/schema/model_and_dict.html#cavc-remand-workflow-for-ama-appeals"
  },"76": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Appellant Substitution workflow (for AMA appeals)",
    "content": ". | An AppellantSubstitution record is created with details for creating the new appeal. | Each AppellantSubstitution record references the source and new appeals via source_appeal_id and target_appeal_id respectively. | Both appeals have the same docket type, docket number, and request issues, but different appellant. | The request issues on the source appeal has associated decision issues with death_dismissal dispositions. | The two appeals can have different tasks, etc. | . | . ",
    "url": "/caseflow/schema/model_and_dict.html#appellant-substitution-workflow-for-ama-appeals",
    "relUrl": "/schema/model_and_dict.html#appellant-substitution-workflow-for-ama-appeals"
  },"77": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Appeals caching",
    "content": "(TBD) . ",
    "url": "/caseflow/schema/model_and_dict.html#appeals-caching",
    "relUrl": "/schema/model_and_dict.html#appeals-caching"
  },"78": {
    "doc": "Data Model &amp; Dictionary",
    "title": "BGS caching",
    "content": "(TBD) . ",
    "url": "/caseflow/schema/model_and_dict.html#bgs-caching",
    "relUrl": "/schema/model_and_dict.html#bgs-caching"
  },"79": {
    "doc": "Data Model &amp; Dictionary",
    "title": "By page",
    "content": " ",
    "url": "/caseflow/schema/model_and_dict.html#by-page",
    "relUrl": "/schema/model_and_dict.html#by-page"
  },"80": {
    "doc": "Data Model &amp; Dictionary",
    "title": "Case Details page",
    "content": "Power of Attorney . | Power of Attorney (POA) | . Trace of POA lookup for LegacyAppeal . | First set RequestStore.store[:application] == \"queue\" because POA lookup is different for different Caseflow apps | Calling LegacyAppeal#representative_name calls LegacyAppealRepresentative#representative_name, which calls PowerOfAttorney#bgs_representative_name, which first looks in Caseflow and if needed queries BGS by using BgsPowerOfAttorney as follows: . | fetch_bgs_power_of_attorney || BgsPowerOfAttorney.new(file_number: file_number) . | fetch_bgs_power_of_attorney calls fetch_bgs_power_of_attorney_by_file_number || fetch_bgs_power_of_attorney_by_claimant_participant_id | file_number is the Veteran’s file number – #veteran_file_number . | calls sanitized_vbms_id but if veteran ||= VeteranFinder.find_best_match(sanitized_vbms_id), then uses veteran.file_number | sanitized_vbms_id calls LegacyAppeal.veteran_file_number_from_bfcorlid(vbms_id) | . | claimant_participant_id comes from LegacyAppeal#claimant_participant_id, which . | checks appellant_ssn (from VACOLS case_record.correspondent.ssn), then looks up Person Person.find_or_create_by_ssn(appellant_ssn) for their participant_id. | . | . | . | . ",
    "url": "/caseflow/schema/model_and_dict.html#case-details-page",
    "relUrl": "/schema/model_and_dict.html#case-details-page"
  },"81": {
    "doc": "Schema Diagrams",
    "title": "Schema Diagrams",
    "content": " ",
    "url": "/caseflow/schema/schema_diagrams.html",
    "relUrl": "/schema/schema_diagrams.html"
  },"82": {
    "doc": "Schema Diagrams",
    "title": "Autogenerated documentation",
    "content": "CSV files of the DB schema: . | Caseflow DB | Caseflow’s ETL DB | . The following subclass and ERD diagrams reflect entities in the Caseflow DB. You can also get the svg version by clicking on the diagrams below. The svg version of these diagrams facilitates text search (by opening the file in a web browser). To Caseflow Engineers: These files are generated by running make docs and are saved in your local docs/schema directory (see PR #16371). In that directory, the svg version of these diagrams facilitates text search, and the dot version allows you to manipulate the diagrams (for example using online Graphviz tools). Caseflow Subclasses . To help understand Caseflow’s schema, let’s start with DB tables that store records (a.k.a. DB rows) representing different ActiveRecord classes. The following diagram shows ActiveRecord classes (and subclasses) associated with certain DB tables. | Classes associated with the same DB table are indicated with the same color – this color-coding is used in subsequent diagrams. | These DB tables typically have a type column that indicates which ActiveRecord class is being represented by the record. | Blue-outlined rectangular nodes typically indicate abstract classes; while ellipses indicate concrete classes. The names of concrete classes are used to populate the type column. | Blue dotted edges/arrows indicate a subclass relationship. | . Notable observations: . | The Appeal class is a subclass of DecisionReview. HigherLevelReview and SupplementalClaim are subclasses of ClaimReview, which is a subclass of DecisionReview. This class hierarchy is mimicked by DecisionReviewIntake, ClaimReviewIntake, HigherLevelReviewIntake and SupplementalClaimIntake. However, all *Intake records are stored in the intakes table, whereas Appeal, HigherLevelReview, and SupplementalClaim records are stored in separate appeals, higher_level_reviews, and supplemental_claims tables respectively. | There are many Tasks and some are grouped under an abstract class. For example, the ColocatedTask abstract class groups many *ColocatedTasks. Similarly, there are abstract classes JudgeTask, AttorneyTask, MailTask, and HearingAdminActionTask. | Vso, FieldVso, and PrivateBar are types of Representatives, which is a subclass of Organization. | . (dot source) . Caseflow ERD . This next diagram is an Entity-Relationship Diagram (ERD), showing how ActiveRecord classes are associated with each other via some *_id column (e.g., foreign keys). The column name can be inferred from the edge label between two nodes. For example, a Hearing record is associated with a HearingDay via the hearings.hearing_day_id column – in the DB, there is a foreign key constraint from the hearings table to the hearing_days table. | To reduce clutter, some abstract classes are consolidated into blue-outlined rectangular nodes containing a title. For example, the node with title appeal_type refers to the Appeal and LegacyAppeal classes. In Rails, this is a polymorphic association – hence a foreign key constraint cannot be added to the DB. | Many classes are associated with the User class. To reduce clutter, a User class is not drawn in the diagram. Instead, this is indicated with the text “(assoc with User)” for relevant classes to avoid drawing too many overlapping edges. | Additional color-coding has been applied to categorize certain nodes: . | light blue: classes containing the string “Hearings” and classes related to hearings | red: classes related to completion of a significant step (e.g., ClaimEstablishment, JudgeCaseReview, DecisionDocument, DecisionIssue, BoardGrantEffectuation) | . | Light gray rectangular nodes with 2 rectangular notches indicate join tables (e.g., OrganizationsUser, RequestDecisionIssue), which associate records in 2 other tables. | Purple edges/arrows indicate custom relationships manually added to the diagram. | Solid blue edges/arrows indicate polymorphic relationships between tables. | . Notable observations: . | DecisionReviewIntake (intakes table) has a polymorphic association to DecisionReview (abstract class) via the detail_id column. However, each type of intake class maps to a specific table. | AppealIntake class maps to the appeals table (a.k.a. Appeal class). | HigherLevelReviewIntake class maps to the higher_level_reviews table (a.k.a. HigherLevelReview class). | SupplementalClaimIntake class maps to the supplemental_claims table (a.k.a. SupplementalClaim class). | RampElectionIntake class maps to the ramp_elections table (a.k.a. RampElection class). | RampRefilingIntake class maps to the ramp_refilings table (a.k.a. RampRefiling class). | . | AppealStreamSnapshot (hearing_appeal_stream_snapshots table) maps a LegacyHearing with a LegacyAppeal. This association is also available in the legacy_hearings table via appeal_id. Perhaps AppealStreamSnapshot should be deprecated. | AppealStreamSnapshot, AppealSeries, LegacyHearing, ClaimEstablishment, Dispatch::Task, EstablishClaim, and WorksheetIssue only exists to support LegacyAppeals. | CavcRemand, AppellantSubstitution, and DocketSwitch reference two different Appeals. | Task can be assigned_to a User or Organization, as indicated by the assigned_to_type column. | The nodes labeled decision_review_type, review_type, and decision_review_remanded_type are synonyms. The naming difference is an artifact of different column names for the associations. | . (dot source) . Caseflow ERD with Subclasses . This next diagram combines the above two diagrams. (dot source) . ",
    "url": "/caseflow/schema/schema_diagrams.html#autogenerated-documentation",
    "relUrl": "/schema/schema_diagrams.html#autogenerated-documentation"
  },"83": {
    "doc": "Tasks",
    "title": "What are tasks?",
    "content": "See all Caseflow tasks’ source code here. Tasks are how Caseflow records who has responsibility for taking action on an appeal. Tasks contain three essential pieces of information: . | Appeal. Which appeal requires this action. | Assignee. Who is supposed to take the action. The assignee can be a person, a team of people, or an abstract organization used as a placeholder for some automated action that will be taken on the appeal. | Type. The type of task implies the action that is supposed to be taken. | . | Each appeal is associated with a root task. All required tasks for the appeal will be children of this root task. | Actions or task state change can cause new tasks to be associated with the root task or its descendant tasks. | Tasks determine what actions are available to a role. | A task’s state is affected by actions taken by a user. | . | Many tasks are first assigned to an Organization. When the admin for the organization (e.g., judge, coordinator) assigns a case to an individual user, a child task (or subtask) is created and assigned to a user within that organization. The task and child task have the same type but different assigned_to_type. | When the child task is created and assigned, the parent task’s state is on_hold. | When the child task’s state is complete, a hook causes the parent task’s state to be complete. | When the child task’s state is cancelled, a hook causes the parent task’s state to be cancelled. | Task Types that do not follow the Parent Org - Child User structure are all Judge Tasks, all Attorney Tasks, and the root task. | Judge &amp; Attorney have a similar parent/child structure, but do not mimic the behavior. | This distinction is a historic artifact, rather than a deliberate choice, as those Judge &amp; Attorney task types predate Organizations. | . | . | . Task status . | Possible task status values (see task.rb: enum status): assigned, in_progress, on_hold, completed, cancelled. | A task is closed if it is completed or cancelled (see Task.closed_statuses). | task.open? is implemented as !self.class.closed_statuses.include?(status). | A task is active (task.active?) if it is assigned or in_progress (see Task.active_statuses). | Note that Task.open_statuses is implemented as active_statuses.concat([Constants.TASK_STATUSES.on_hold]), which corresponds with task.open? as long as no other status values are added. | When a status is “active” we expect properties of the task to change. When a task is not “active” we expect that properties of the task will not change. | . Cancellation reason . There are many reasons why a task might be cancelled. cancellation_reason provides a means to identify a reason for a task’s most recent cancelled status. Usually a cancelled status is a final state for a task, so we wouldn’t expect it to change again. The cancellation_reason can be cleared for a task if the task ever gets uncancelled, and a new reason can be added, should it be cancelled for a different reason. Supplemental information from users for cancellation_reason can be stored in instructions. Possible values for cancellation_reason are detailed here (see also task.rb: enum cancellation_reason): . | cancellation_reason value | Description | . | poa_change | IHP tasks are cancelled when there is a change of POA for an appeal. The IHP task for the original POA gets cancelled and a new IHP task is opened for the new POA. | . How do tasks map to the appeals process? . | For further description, see this slide deck. | Also check out this generated Task Tree documentation | . Task timestamps . Tasks all have 6 timestamps that record when certain events happen . | created_at: When the ActiveRecord was created (done automatically by rails) | updated_at: When any field of the ActiveRecord was last updated (done automatically by rails) | assigned_at: When the ActiveRecord is created, this is set to the creation datetime or what assigned_at attribute is passed to the task upon creation. It is also set when a task’s status is updated to “assigned” | started_at: When a task’s status is updated to “in_progress” | placed_on_hold_at: When a task’s status is updated to “on_hold” | closed_at: When a task’s status is updated to “completed” or “cancelled” | . ",
    "url": "/caseflow/caseflow-queues/tasks.html#what-are-tasks",
    "relUrl": "/caseflow-queues/tasks.html#what-are-tasks"
  },"84": {
    "doc": "Tasks",
    "title": "What are task actions?",
    "content": "Task actions are the options that are presented in a dropdown menu on the case details page of an individual appeal. Each task has a set of actions available to be taken on it given the state of the appeal, type of task, and relationship of the current user to the appeal. Task actions do only one thing: redirect the current user to a different URL when clicked. The resulting page may be a modal or workflow where additional information is gathered to be sent in a subsequent request to the server. Task actions enumerated . ",
    "url": "/caseflow/caseflow-queues/tasks.html#what-are-task-actions",
    "relUrl": "/caseflow-queues/tasks.html#what-are-task-actions"
  },"85": {
    "doc": "Tasks",
    "title": "How do tasks and organizations interact?",
    "content": "For a more complete look into how tasks and organizations interact, please view this video recording of a presentation on the subject. ",
    "url": "/caseflow/caseflow-queues/tasks.html#how-do-tasks-and-organizations-interact",
    "relUrl": "/caseflow-queues/tasks.html#how-do-tasks-and-organizations-interact"
  },"86": {
    "doc": "Tasks",
    "title": "How do I recover if the task tree is in a bad state?",
    "content": "When the task tree cannot be restored to the correct state by actions available to Caseflow users (like cancelling a task), the Caseflow application development team can manually correct the state of the task tree. For specific examples of these occasions please visit the dedicated wiki page. ",
    "url": "/caseflow/caseflow-queues/tasks.html#how-do-i-recover-if-the-task-tree-is-in-a-bad-state",
    "relUrl": "/caseflow-queues/tasks.html#how-do-i-recover-if-the-task-tree-is-in-a-bad-state"
  },"87": {
    "doc": "Tasks",
    "title": "What are Timed Tasks?",
    "content": "Tasks indicate that an action needs to be performed by somebody or some automated process. In addition to tasks that indicate some action needs to be taken by a person or some other active system, sometimes an appeal just needs to wait for some time to pass, so we created the timed task mechanism as a way to satisfy that need. ",
    "url": "/caseflow/caseflow-queues/tasks.html#what-are-timed-tasks",
    "relUrl": "/caseflow-queues/tasks.html#what-are-timed-tasks"
  },"88": {
    "doc": "Tasks",
    "title": "What are Engineering Tasks?",
    "content": "An EngineeringTask is used to keep Caseflow users aware of engineering work (including long-term Bat Team work) on an appeal, reduce false positives when checking for stuck appeals, and enable more accurate time-keeping when reporting on Caseflow users’ time spent on an appeal. For motivating factors, see the EngineeringTask Tech Spec #16445. For usage examples, see the associated RSpec. The EngineeringTask is assigned to a specific engineer when possible; otherwise it is assigned to the Caseflow user (User.system_user). One use case is to create a child EngineeringTask to block a parent task (e.g., BvaDispatchTask) when the complete workflow is not yet implemented (e.g., Unrecognized Appellant work). ",
    "url": "/caseflow/caseflow-queues/tasks.html#what-are-engineering-tasks",
    "relUrl": "/caseflow-queues/tasks.html#what-are-engineering-tasks"
  },"89": {
    "doc": "Tasks",
    "title": "What are Blocking Tasks?",
    "content": "What Blocking Means . There are three general ways we use the concept of “blocking” in Caseflow, one general, and two aligned with how a case processes runs. General Use Task A is blocking task B if no work can be done on Task B until Task A is completed. Examples here would include Attorney Drafting Tasks blocking Judge Decision Review, Timed Hold Tasks block any task that requests it, etc. This is implemented in two ways, via a child-task relationship of task B to task A in the task tree (eg Attorney Decision Drafting is the child of a Judge Decision Review), or by the explicit creation of Task B upon completion of Task A (eg Judge Assign Task is created when the Distribution Task completes). Blocks Distribution Tasks which block distribution are a specific case of general blocking, implemented via the child-task relationship. Tasks which block distribution are created as children of the Distribution Task. A case is ready for distribution only when all children of the Distribution Task are complete. In Evidence Window dockets, the Evidence Submission window blocks distribution. In hearing dockets, the hearing task &amp; all its children block distribution. In Direct Review, there are no tasks blocking distribution by default. All dockets may have their distribution blocked if they receive a Blocking Mail Task. Blocks Dispatch As of June 2020, there is no special handling for blocking dispatch. Only the general blocking as defined above applies. Non blocking . In Caseflow, nonblocking tasks can be worked in parallel. This is implemented by having the Tasks be on different branches. All leaf tasks on a task tree can be worked in parallel. Examples include an attorney creating two colocated tasks, or if a non-blocking Mail task comes in. The Root Task . Every Appeal has one root task. It is used as a container and tracker for the entire case’s task tree. The root task is never considered blocked. Tasks created off the Root Task can run in parallel to each other. When any child task of the root task is completed, that task is responsible for creating a new sibling on the root task to track the next stage of the case process. For example, when a Distribution task is completed, the Judge Assign task is created. When the Judge Assign task is completed, the Judge Decision Review Task with a child Attorney Decision Drafting tasks are created. Mail Tasks . Most tasks of the same type tend to behave the same. Mail Tasks are the exception to this. Some Mail tasks block Distribution, if the case has not yet been sent to a judge for drafting the decision. These mail tasks will block case distribution if they come in before the distribution, pulled June 2020. &gt; MailTask.blocking_subclasses =&gt; [\"CongressionalInterestMailTask\", \"ExtensionRequestMailTask\", \"FoiaRequestMailTask\", \"HearingRelatedMailTask\", \"PowerOfAttorneyRelatedMailTask\", \"PrivacyActRequestMailTask\", \"PrivacyComplaintMailTask\"] . Other Mail Tasks are worked in parallel. Any mail tasks that come in after a case has been distributed are created off the root task, and worked in parallel. See the Mail Tasks TaskTree Documentation . Exceptions . DecisionReviewTask and Dispatch::Tasks may follow different paradigms. Hearing Tasks follow general blocking, but may have different flow within the Hearing Task Tree Branch. In Queue, User tasks do not block their matching parent Organization Task. Rather, the pair tend to complete at the same time. Organizations tasks are used by Organization admin users to track the appeal as it is under control of their org. They also give the admin users access to reassign or cancel that user task, as appropriate. User tasks are assigned to individual users within the org to track to actual work of the case. Docket Switch Tasks . Task Behavior . The docket switch flow begins with the creation of a DocketSwitchMailTask by a user at the Clerk of the Board. This task gets created as a child of the DistributionTask to block distribution to a VLJ while the docket switch request is under review. The task gets assigned to that same user whereupon they will send the request to switch dockets to a VLJ. Sending the request to a judge closes the DocketSwitchMailTask with a status of completed, closes the parent DocketSwitchMailTask assigned to the Organization as well, and creates a DocketSwitchRulingTask. Once the VLJ decides to either grant or deny the request to switch dockets, that in turn will create either a DocketSwitchGrantedTask or DocketSwitchDeniedTask and close the DocketSwitchRulingTask with a status of completed. These are the final tasks within the docket switch task flow. Docket Switch Granted Task Tree . Appeal 1639 (D 210726-1639 Original) ────── │ ID │ STATUS │ ASGN_BY │ ASGN_TO │ UPDATED_AT │ └── RootTask │ 6876 │ cancelled │ │ Bva │ 2021-07-27 17:39:06 UTC │ └── DistributionTask │ 6877 │ cancelled │ │ Bva │ 2021-07-27 17:43:28 UTC │ ├── DocketSwitchMailTask │ 6878 │ completed │ │ ClerkOfTheBoard │ 2021-07-27 17:40:40 UTC │ │ └── DocketSwitchMailTask │ 6879 │ completed │ COB_USER │ COB_USER │ 2021-07-27 17:40:40 UTC │ └── DocketSwitchRulingTask │ 6880 │ completed │ COB_USER │ BVAAABSHIRE │ 2021-07-27 17:43:28 UTC │ └── DocketSwitchGrantedTask │ 6881 │ completed │ BVAAABSHIRE │ ClerkOfTheBoard │ 2021-07-27 17:43:28 UTC │ └── DocketSwitchGrantedTask │ 6882 │ completed │ BVAAABSHIRE │ COB_USER │ 2021-07-27 17:43:29 UTC │ └────────────────────────────────────────────────────────────────────────────┘ . Docket Switch Denied Task Tree . Appeal 1640 (E 210726-1639 Original) ───── │ ID │ STATUS │ ASGN_BY │ ASGN_TO │ UPDATED_AT │ └── RootTask │ 6883 │ on_hold │ │ Bva │ 2021-07-27 17:43:28 UTC │ ├── DistributionTask │ 6884 │ on_hold │ │ Bva │ 2021-07-27 17:43:28 UTC │ │ ├── EvidenceSubmissionWindowTask │ 6885 │ assigned │ │ MailTeam │ 2021-07-27 17:43:28 UTC │ │ ├── DocketSwitchMailTask │ 6887 │ completed │ │ ClerkOfTheBoard │ 2021-07-27 17:45:37 UTC │ │ │ └── DocketSwitchMailTask │ 6888 │ completed │ COB_USER │ COB_USER │ 2021-07-27 17:45:37 UTC │ │ └── DocketSwitchRulingTask │ 6889 │ completed │ COB_USER │ BVAAABSHIRE │ 2021-07-27 17:49:06 UTC │ │ └── DocketSwitchDeniedTask │ 6890 │ completed │ BVAAABSHIRE │ ClerkOfTheBoard │ 2021-07-27 17:49:05 UTC │ │ └── DocketSwitchDeniedTask │ 6891 │ completed │ BVAAABSHIRE │ COB_USER │ 2021-07-27 17:49:06 UTC │ . Task Creation . Upon switching an appeal to a different docket type, and in turn creating a new appeal stream, the task creation process largely mimics when intaking a new appeal. All new appeals will have a RootTask and DistributionTask with a status of on_hold. The new appeal will also have a DocketSwitchGrantedTask with a status of complete which is shown in the Case Timeline and requires no action. When switching to a DirectReview docket, an InformalHearingPresentation task will be created as a child of the DistributionTask if the appellant has a VSO representing them and that VSO is configured to perform IHPs. When switching to an EvidenceSubmission docket, an EvidenceSubmissionWindowTask will be automatically created as a child of the DistributionTask and with a status of assigned. This task signifies the 90-day window during which an appellant may submit additional evidence before the appeal gets distributed to a VLJ. An InformalHearingPresentation task will also be created as a child of the DistributionTask after the 90-day evidence submission window is complete if the appellant has a VSO representing them and that VSO is configured to perform IHPs. When switching to a Hearing docket, a Hearing task will be automatically created as a child of the DistributionTask and a ScheduleHearingTask will be automatically created as a child of the Hearing task. Once these tasks are completed by scheduling and holding a hearing, the appeal will be ready for distribution to a VLJ. Tasks ineligible to switch dockets . Tasks listed below are ineligible to switch dockets. All other tasks will default to switching dockets but the user granting the request can remove these tasks from switching in the UI . | Open tasks with children | RootTask - Newly created for new appeal stream | DistributionTask - Newly created for new appeal stream | EvidenceSubmissionWindowTask &amp; children | HearingTask &amp; children | DocketSwitch tasks - New DocketSwitchGrantedTask created for new appeal stream | . Tasks that should have only one open at a time . There are certain task types that an appeal should have only one open instance of at a time. Team Echo is currently working with the board to confirm which task types have these restrictions. For an evolving list, please see this github comment. ",
    "url": "/caseflow/caseflow-queues/tasks.html#what-are-blocking-tasks",
    "relUrl": "/caseflow-queues/tasks.html#what-are-blocking-tasks"
  },"90": {
    "doc": "Tasks",
    "title": "Tasks",
    "content": ". | What are tasks? . | Task status | Cancellation reason | How do tasks map to the appeals process? | Task timestamps | . | What are task actions? | How do tasks and organizations interact? | How do I recover if the task tree is in a bad state? | What are Timed Tasks? | What are Engineering Tasks? | What are Blocking Tasks? . | What Blocking Means | Non blocking | The Root Task | Mail Tasks | Exceptions | Docket Switch Tasks . | Task Behavior . | Docket Switch Granted Task Tree | Docket Switch Denied Task Tree | . | Task Creation | Tasks ineligible to switch dockets | . | Tasks that should have only one open at a time | . | . ",
    "url": "/caseflow/caseflow-queues/tasks.html",
    "relUrl": "/caseflow-queues/tasks.html"
  }
}
